// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReactIntl from "react-intl";
import * as Tab$BtsCore from "../../material-ui/core/Tabs/Tab.bs.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Path$BtsCore from "../../features/Path.bs.js";
import * as Tabs$BtsCore from "../../material-ui/core/Tabs/Tabs.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as Button$BtsCore from "../../material-ui/core/Button/Button.bs.js";
import * as Status$BtsCore from "../../features/Status.bs.js";
import * as Switch$BtsCore from "../../material-ui/core/Switch/Switch.bs.js";
import * as Divider$BtsCore from "../../material-ui/core/Divider/Divider.bs.js";
import * as Tooltip$BtsCore from "../../material-ui/core/Tooltip/Tooltip.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as MenuIcon$BtsCore from "../../material-ui/core/MenuItem/MenuIcon.bs.js";
import * as MenuItem$BtsCore from "../../material-ui/core/MenuItem/MenuItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as SelectMenu$BtsCore from "../../material-ui/core/Menu/SelectMenu.bs.js";
import * as Typography$BtsCore from "../../material-ui/core/Typography/Typography.bs.js";
import * as AnswerColor$BtsCore from "../../controls/AnswerColor.bs.js";
import * as IconGeneral$BtsCore from "../../material-ui/core/IconStyle/IconGeneral.bs.js";
import * as ImageUpload$BtsCore from "../../example/Uploads/ImageUpload.bs.js";
import * as NewFacetube$BtsCore from "../../example/Facebook/NewFacetube.bs.js";
import * as SwitchColor$BtsCore from "../../controls/SwitchColor.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as IconAnimation$BtsCore from "../../controls/IconAnimation.bs.js";
import * as SelectOutline$BtsCore from "../../material-ui/core/Select/SelectOutline.bs.js";
import * as ExpansionBasis$BtsCore from "../../material-ui/core/ExpansionPanel/ExpansionBasis.bs.js";
import * as ExpansionPanel$BtsCore from "../../material-ui/core/ExpansionPanel/ExpansionPanel.bs.js";
import * as SelectStandard$BtsCore from "../../material-ui/core/Select/SelectStandard.bs.js";
import * as BackgroundBoard$BtsCore from "../../example/Boards/BackgroundBoard.bs.js";
import * as SnackbarYoutube$BtsCore from "../../material-ui/core/Snackbar/SnackbarYoutube.bs.js";
import * as CardOrPaperBoard$BtsCore from "../../example/Boards/CardOrPaperBoard.bs.js";
import * as ExpansionSummary$BtsCore from "../../material-ui/core/ExpansionPanel/ExpansionSummary.bs.js";
import * as TextFieldOutline$BtsCore from "../../material-ui/core/TextField/TextFieldOutline.bs.js";
import * as TextFieldStandard$BtsCore from "../../material-ui/core/TextField/TextFieldStandard.bs.js";
import * as TextFieldMultiline$BtsCore from "../../material-ui/core/TextField/TextFieldMultiline.bs.js";

((require('../../../scss/pages/Together/together.scss')));

function newitem(iid, opticonitems) {
  return [{
            iid: iid,
            showLine: false,
            title: "",
            showOut: false,
            showVeri: false,
            showDrop: false,
            showFile: false,
            outValue: "radio",
            type_: "",
            showType: false,
            typeitems: [],
            operation: "",
            showOperation: false,
            operationitems: [],
            area: "",
            eror: "",
            showCheck: false,
            showMore: false,
            opticonitems: opticonitems,
            answeritems: [{
                id: 1,
                value: "",
                showAnswer: false,
                ansrDelete: false
              }],
            itemDelete: false
          }];
}

function newansweritem(id) {
  return [{
            id: id,
            value: "",
            showAnswer: false,
            ansrDelete: false
          }];
}

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* SettingError */0 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: !state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* SettingFormLoad */1 :
          return {
                  formLoad: !state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionShowProgress */2 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: !state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SettingFormWidth */0 :
          return {
                  formLoad: state.formLoad,
                  formWidth: action[0],
                  formHeight: action[1],
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionPermissItems */1 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: action[0],
                  update: action[1],
                  delete: action[2],
                  export: action[3],
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* SettingFormItems */2 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: action[0],
                  settitems: action[1],
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeFormTile */3 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: action[0],
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeFormDesc */4 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: action[0],
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickItemTab */5 :
          var index = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: List.mapi((function (i, tabitem) {
                          return {
                                  showTab: index === i,
                                  tabImage: tabitem.tabImage
                                };
                        }), state.tabitems),
                  index: index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickBoardPaper */6 :
          var index$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showLine = index$1 === i;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeTitle */7 :
          var index$2 = action[1];
          var value = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$2 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.title = value;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowOut */8 :
          var index$3 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showOut = index$3 === i ? !item.showOut : false;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowValue */9 :
          var index$4 = action[1];
          var outValue = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$4 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.outValue = outValue;
                          newrecord.showOut = false;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeText */10 :
          var index$5 = action[2];
          var rindex = action[1];
          var value$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$5 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.answeritems = $$Array.mapi((function (ri, answeritem) {
                                  if (rindex === ri) {
                                    return {
                                            id: answeritem.id,
                                            value: value$1,
                                            showAnswer: answeritem.showAnswer,
                                            ansrDelete: answeritem.ansrDelete
                                          };
                                  } else {
                                    return answeritem;
                                  }
                                }), item.answeritems);
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickRadio */11 :
          var index$6 = action[1];
          var rindex$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$6 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.answeritems = $$Array.mapi((function (ri, answeritem) {
                                  return {
                                          id: answeritem.id,
                                          value: answeritem.value,
                                          showAnswer: rindex$1 === ri ? !answeritem.showAnswer : false,
                                          ansrDelete: answeritem.ansrDelete
                                        };
                                }), item.answeritems);
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickCheckbox */12 :
          var index$7 = action[1];
          var rindex$2 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$7 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.answeritems = $$Array.mapi((function (ri, answeritem) {
                                  if (rindex$2 === ri) {
                                    return {
                                            id: answeritem.id,
                                            value: answeritem.value,
                                            showAnswer: !answeritem.showAnswer,
                                            ansrDelete: answeritem.ansrDelete
                                          };
                                  } else {
                                    return answeritem;
                                  }
                                }), item.answeritems);
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClearOption */13 :
          var index$8 = action[1];
          var rindex$3 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$8 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.answeritems = $$Array.mapi((function (ri, answeritem) {
                                  if (rindex$3 === ri) {
                                    return {
                                            id: answeritem.id,
                                            value: answeritem.value,
                                            showAnswer: answeritem.showAnswer,
                                            ansrDelete: !answeritem.ansrDelete
                                          };
                                  } else {
                                    return answeritem;
                                  }
                                }), item.answeritems);
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowType */14 :
          var index$9 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$9 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showType = !item.showType;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickType */15 :
          var index$10 = action[3];
          var operationitems = action[2];
          var operation = action[1];
          var type_ = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$10 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.operationitems = operationitems;
                          newrecord.operation = operation;
                          newrecord.showType = false;
                          newrecord.type_ = type_;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowOperation */16 :
          var index$11 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$11 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showOperation = !item.showOperation;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickOperation */17 :
          var index$12 = action[1];
          var operation$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$12 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showOperation = false;
                          newrecord.operation = operation$1;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeArea */18 :
          var index$13 = action[1];
          var area = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$13 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.area = area;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeEror */19 :
          var index$14 = action[1];
          var eror = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$14 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.eror = eror;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClearCondition */20 :
          var index$15 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$15 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showMore = false;
                          newrecord.showVeri = false;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowMore */21 :
          var index$16 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$16 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showMore = !item.showMore;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowVerification */22 :
          var index$17 = action[4];
          var operationitems$1 = action[3];
          var operation$2 = action[2];
          var typeitems = action[1];
          var type_$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$17 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showMore = false;
                          newrecord.operationitems = operationitems$1;
                          newrecord.operation = operation$2;
                          newrecord.typeitems = typeitems;
                          newrecord.type_ = type_$1;
                          newrecord.showVeri = true;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* CheckItem */23 :
          var index$18 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$18 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showCheck = !item.showCheck;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* DeleteItem */24 :
          var index$19 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$19 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.itemDelete = !item.itemDelete;
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* AddItem */25 :
          var index$20 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$20 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.answeritems = $$Array.append(item.answeritems, newansweritem(Caml_array.caml_array_get(Caml_array.caml_array_get(state.items, i).answeritems, item.answeritems.length - 1 | 0).id + 1 | 0));
                          return newrecord;
                        }), state.items),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* AddForm */26 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.append(state.items, newitem(Caml_array.caml_array_get(state.items, state.items.length - 1 | 0).iid + 1 | 0, action[0])),
                  settitems: state.settitems,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeStdate */27 :
          var index$21 = action[1];
          var value$2 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$21 === i) {
                            return {
                                    stdate: value$2,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeSttime */28 :
          var index$22 = action[1];
          var value$3 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$22 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: value$3,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeEndate */29 :
          var index$23 = action[1];
          var value$4 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$23 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: value$4,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeEntime */30 :
          var index$24 = action[1];
          var value$5 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$24 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: value$5,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowExam */31 :
          var index$25 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$25 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: !settitem.showExam,
                                    randOption: settitem.showExam ? false : settitem.randOption,
                                    randSubtile: settitem.showExam ? false : settitem.randSubtile,
                                    showRestart: settitem.showExam ? false : settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* RandOption */32 :
          var index$26 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$26 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: !settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* RandSubtile */33 :
          var index$27 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$27 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: !settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowRestart */34 :
          var index$28 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$28 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: !settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeNumber */35 :
          var index$29 = action[1];
          var value$6 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$29 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: value$6
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowLimit */36 :
          var index$30 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$30 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: !settitem.showLimit,
                                    dertitems: settitem.dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* AddDert */37 :
          var dertitems = action[1];
          var index$31 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$31 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: dertitems,
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowPanel */38 :
          var dindex = action[1];
          var index$32 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$32 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: $$Array.mapi((function (di, dertitem) {
                                            if (dindex === di) {
                                              return {
                                                      showPanel: !dertitem.showPanel,
                                                      dertment: dertitem.dertment,
                                                      operitems: dertitem.operitems,
                                                      dertModify: dertitem.dertModify
                                                    };
                                            } else {
                                              return dertitem;
                                            }
                                          }), settitem.dertitems),
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* AddOper */39 :
          var operitems = action[2];
          var dindex$1 = action[1];
          var index$33 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$33 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: $$Array.mapi((function (di, dertitem) {
                                            if (dindex$1 === di) {
                                              return {
                                                      showPanel: dertitem.showPanel,
                                                      dertment: dertitem.dertment,
                                                      operitems: operitems,
                                                      dertModify: dertitem.dertModify
                                                    };
                                            } else {
                                              return dertitem;
                                            }
                                          }), settitem.dertitems),
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowOper */40 :
          var oindex = action[2];
          var dindex$2 = action[1];
          var index$34 = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: $$Array.mapi((function (i, settitem) {
                          if (index$34 === i) {
                            return {
                                    stdate: settitem.stdate,
                                    sttime: settitem.sttime,
                                    endate: settitem.endate,
                                    entime: settitem.entime,
                                    showExam: settitem.showExam,
                                    randOption: settitem.randOption,
                                    randSubtile: settitem.randSubtile,
                                    showRestart: settitem.showRestart,
                                    showLimit: settitem.showLimit,
                                    dertitems: $$Array.mapi((function (di, dertitem) {
                                            if (dindex$2 === di) {
                                              return {
                                                      showPanel: dertitem.showPanel,
                                                      dertment: dertitem.dertment,
                                                      operitems: $$Array.mapi((function (oi, operitem) {
                                                              if (oindex === oi) {
                                                                return {
                                                                        newid: operitem.newid,
                                                                        userid: operitem.userid,
                                                                        name: operitem.name,
                                                                        showOper: !operitem.showOper
                                                                      };
                                                              } else {
                                                                return operitem;
                                                              }
                                                            }), dertitem.operitems),
                                                      dertModify: true
                                                    };
                                            } else {
                                              return dertitem;
                                            }
                                          }), settitem.dertitems),
                                    number: settitem.number
                                  };
                          } else {
                            return settitem;
                          }
                        }), state.settitems),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionSnackBar */41 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  tile: state.tile,
                  desc: state.desc,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  settitems: state.settitems,
                  showYoutube: action[1],
                  youtubeText: action[0]
                };
      
    }
  }
}

var initialState_tabitems = /* :: */[
  {
    showTab: true,
    tabImage: Icons$BtsCore.questionAnswerBlack
  },
  /* :: */[
    {
      showTab: false,
      tabImage: Icons$BtsCore.settingsBlack
    },
    /* :: */[
      {
        showTab: false,
        tabImage: Icons$BtsCore.personAddBlack
      },
      /* [] */0
    ]
  ]
];

var initialState_items = [];

var initialState_settitems = [];

var initialState = {
  formLoad: false,
  formWidth: 0,
  formHeight: 0,
  showProgress: true,
  error: false,
  insert: false,
  update: false,
  delete: false,
  export: false,
  tile: "noTitle",
  desc: "",
  tabitems: initialState_tabitems,
  index: 0,
  items: initialState_items,
  settitems: initialState_settitems,
  showYoutube: false,
  youtubeText: ""
};

function Formor(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var barShowRestoreAction = function (youtubeText) {
    Curry._1(dispatch, /* ActionSnackBar */Block.__(41, [
            youtubeText,
            true
          ]));
    setTimeout((function (param) {
            return Curry._1(dispatch, /* ActionSnackBar */Block.__(41, [
                          "",
                          false
                        ]));
          }), 5000);
    
  };
  var searchAJax = function (param) {
    Axiosapi$BtsCore.Formor.search(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* SettingFormItems */Block.__(2, [
                                  response.data.items,
                                  response.data.settitems
                                ])), Curry._1(dispatch, /* ActionShowProgress */2)));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var permissAJax = function (param) {
    Axiosapi$BtsCore.Form.permiss(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* ActionPermissItems */Block.__(1, [
                                  response.data.insert,
                                  response.data.update,
                                  response.data.delete,
                                  response.data.export
                                ])), searchAJax(undefined)));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          var match = state.formLoad;
          if (match) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */1);
          Curry._1(dispatch, /* SettingFormWidth */Block.__(0, [
                  window.innerWidth,
                  window.innerHeight
                ]));
          var timeId = permissAJax(undefined);
          return (function (param) {
                    return timeId;
                  });
        }));
  var handleResize = function ($$event) {
    return Curry._1(dispatch, /* SettingFormWidth */Block.__(0, [
                  $$event.currentTarget.innerWidth,
                  $$event.currentTarget.innerHeight
                ]));
  };
  React.useEffect((function () {
          window.addEventListener("resize", handleResize, true);
          return (function (param) {
                    
                  });
        }), ([]));
  var changeFormTile = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFormTile */Block.__(3, [value]));
        }));
  var changeFormDesc = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFormDesc */Block.__(4, [value]));
        }));
  var clickItemTab = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ClickItemTab */Block.__(5, [i]));
        }));
  var clickBoardPaper = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ClickBoardPaper */Block.__(6, [i]));
        }));
  var changeTitle = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeTitle */Block.__(7, [
                            value,
                            i
                          ]));
            });
        }));
  var showOut = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowOut */Block.__(8, [i]));
        }));
  var showValue = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ShowValue */Block.__(9, [
                            value,
                            i
                          ]));
            });
        }));
  var changeText = React.useCallback((function (value) {
          return (function (ri, i) {
              return Curry._1(dispatch, /* ChangeText */Block.__(10, [
                            value,
                            ri,
                            i
                          ]));
            });
        }));
  var clickElement = React.useCallback((function (value) {
          return (function (ri, i) {
              if (value === "checkbox") {
                return Curry._1(dispatch, /* ClickCheckbox */Block.__(12, [
                              ri,
                              i
                            ]));
              } else {
                return Curry._1(dispatch, /* ClickRadio */Block.__(11, [
                              ri,
                              i
                            ]));
              }
            });
        }));
  var clearOption = React.useCallback((function (ri) {
          return (function (i) {
              return Curry._1(dispatch, /* ClearOption */Block.__(13, [
                            ri,
                            i
                          ]));
            });
        }));
  var showType = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowType */Block.__(14, [i]));
        }));
  var clickType = React.useCallback((function (type_) {
          return (function (i) {
              Axiosapi$BtsCore.Formor.sType(Data$BtsCore.otherData(i, localStorage.getItem("newid"))).then((function (response) {
                        var match = response.data.status;
                        var tmp;
                        if (match === "istrue") {
                          tmp = Curry._1(dispatch, /* ClickType */Block.__(15, [
                                  i,
                                  response.data.value,
                                  response.data.items,
                                  type_
                                ]));
                        } else {
                          barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                          tmp = Curry._1(dispatch, /* ClearCondition */Block.__(20, [type_]));
                        }
                        return Promise.resolve(tmp);
                      })).catch((function (error) {
                      return Promise.resolve((console.log(error), undefined));
                    }));
              
            });
        }));
  var showOperation = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowOperation */Block.__(16, [i]));
        }));
  var clickOperation = React.useCallback((function (operation) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickOperation */Block.__(17, [
                            operation,
                            i
                          ]));
            });
        }));
  var changeArea = React.useCallback((function (area) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeArea */Block.__(18, [
                            area,
                            i
                          ]));
            });
        }));
  var changeEror = React.useCallback((function (area) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeEror */Block.__(19, [
                            area,
                            i
                          ]));
            });
        }));
  var clearCondition = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ClearCondition */Block.__(20, [i]));
        }));
  var showMore = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowMore */Block.__(21, [i]));
        }));
  var showVerification = React.useCallback((function (showVeri) {
          return (function (i) {
              if (showVeri) {
                return Curry._1(dispatch, /* ClearCondition */Block.__(20, [i]));
              } else {
                Axiosapi$BtsCore.Formor.sVeri(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
                          var match = response.data.status;
                          var tmp;
                          if (match === "istrue") {
                            tmp = Curry._1(dispatch, /* ShowVerification */Block.__(22, [
                                    response.data.type_,
                                    response.data.typeitems,
                                    response.data.operation,
                                    response.data.operationitems,
                                    i
                                  ]));
                          } else {
                            barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                            tmp = Curry._1(dispatch, /* ClearCondition */Block.__(20, [i]));
                          }
                          return Promise.resolve(tmp);
                        })).catch((function (error) {
                        return Promise.resolve((console.log(error), undefined));
                      }));
                return ;
              }
            });
        }));
  var checkItem = React.useCallback((function (i) {
          return Curry._1(dispatch, /* CheckItem */Block.__(23, [i]));
        }));
  var deleteItem = React.useCallback((function (i) {
          return Curry._1(dispatch, /* DeleteItem */Block.__(24, [i]));
        }));
  var addItem = React.useCallback((function (i) {
          return Curry._1(dispatch, /* AddItem */Block.__(25, [i]));
        }));
  var insertForm = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */2);
          Axiosapi$BtsCore.Formor.insert(Data$BtsCore.iFormsData(state.tile, state.desc, state.items.filter((function (item) {
                              return item.itemDelete !== true;
                            })), state.settitems, Caml_array.caml_array_get(state.settitems, 0).dertitems.filter((function (dertitem) {
                              return dertitem.dertModify === true;
                            })), localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      tmp = ReasonReactRouter.push(Path$BtsCore.proformPath);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var addForm = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */2);
          Axiosapi$BtsCore.Formor.add(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
                    return Promise.resolve((Curry._1(dispatch, /* AddForm */Block.__(26, [response.data.items])), Curry._1(dispatch, /* ActionShowProgress */2)));
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var changeStdate = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeStdate */Block.__(27, [
                            value,
                            i
                          ]));
            });
        }));
  var changeSttime = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeSttime */Block.__(28, [
                            value,
                            i
                          ]));
            });
        }));
  var changeEndate = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeEndate */Block.__(29, [
                            value,
                            i
                          ]));
            });
        }));
  var changeEntime = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeEntime */Block.__(30, [
                            value,
                            i
                          ]));
            });
        }));
  var showExam = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowExam */Block.__(31, [i]));
        }));
  var randOption = React.useCallback((function (i) {
          return Curry._1(dispatch, /* RandOption */Block.__(32, [i]));
        }));
  var randSubtile = React.useCallback((function (i) {
          return Curry._1(dispatch, /* RandSubtile */Block.__(33, [i]));
        }));
  var showRestart = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowRestart */Block.__(34, [i]));
        }));
  var changeNumber = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeNumber */Block.__(35, [
                            value,
                            i
                          ]));
            });
        }));
  var showLimit = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ShowLimit */Block.__(36, [i]));
              if (!value) {
                Curry._1(dispatch, /* ActionShowProgress */2);
                Axiosapi$BtsCore.Formor.sLimit(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
                          return Promise.resolve((Curry._1(dispatch, /* AddDert */Block.__(37, [
                                              i,
                                              response.data.items
                                            ])), Curry._1(dispatch, /* ActionShowProgress */2)));
                        })).catch((function (error) {
                        return Promise.resolve((console.log(error), undefined));
                      }));
                return ;
              }
              
            });
        }));
  var showPanel = React.useCallback((function (value) {
          return (function (i, di, items) {
              Curry._1(dispatch, /* ShowPanel */Block.__(38, [
                      i,
                      di
                    ]));
              if (items.length === 0) {
                Axiosapi$BtsCore.Formor.sOper(Data$BtsCore.otherData(localStorage.getItem("newid"), value)).then((function (response) {
                          return Promise.resolve(Curry._1(dispatch, /* AddOper */Block.__(39, [
                                            i,
                                            di,
                                            response.data.items
                                          ])));
                        })).catch((function (error) {
                        return Promise.resolve((console.log(error), undefined));
                      }));
                return ;
              }
              
            });
        }));
  var showOper = React.useCallback((function (i) {
          return (function (di, oi) {
              return Curry._1(dispatch, /* ShowOper */Block.__(40, [
                            i,
                            di,
                            oi
                          ]));
            });
        }));
  var match$1 = state.index;
  return React.createElement(React.Fragment, undefined, React.createElement(NewFacetube$BtsCore.make, {
                  showProgress: state.showProgress,
                  error: state.error,
                  children: React.createElement(GridItem$BtsCore.make, {
                        style: Together$BtsCore.marginAuto,
                        top: "0",
                        right: "0",
                        bottom: "0",
                        left: "54",
                        xs: "12",
                        maxWidth: "770px",
                        children: React.createElement(GridContainer$BtsCore.make, {
                              direction: "column",
                              justify: "center",
                              alignItem: "stretch",
                              children: null
                            }, React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(TextFieldStandard$BtsCore.make, {
                                        labelColor: "rgba(255,0,0,0.8)",
                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                        downBorderColor: "rgba(255,0,0,0.6)",
                                        borderColor: "rgba(0,0,0,0.2)",
                                        placeholder: "Project Tile",
                                        value: state.tile,
                                        disabled: state.showProgress,
                                        onChange: (function ($$event) {
                                            return Curry._1(changeFormTile, $$event.target.value);
                                          }),
                                        children: null
                                      })
                                }), React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(TextFieldStandard$BtsCore.make, {
                                        top: "8",
                                        labelColor: "rgba(255,0,0,0.8)",
                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                        downBorderColor: "rgba(255,0,0,0.6)",
                                        borderColor: "rgba(0,0,0,0.2)",
                                        placeholder: "Project Desc",
                                        value: state.desc,
                                        disabled: state.showProgress,
                                        onChange: (function ($$event) {
                                            return Curry._1(changeFormDesc, $$event.target.value);
                                          }),
                                        children: null
                                      })
                                }), React.createElement(GridItem$BtsCore.make, {
                                  style: {
                                    position: "sticky",
                                    top: "0px",
                                    zIndex: "1000"
                                  },
                                  top: "0",
                                  right: "24",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(GridContainer$BtsCore.make, {
                                        direction: "row",
                                        justify: "around",
                                        alignItem: "center",
                                        children: null
                                      }, React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "auto",
                                            children: React.createElement(Tabs$BtsCore.make, {
                                                  id: "report-",
                                                  index: state.index,
                                                  height: "3",
                                                  children: $$Array.of_list(List.mapi((function (i, tabitem) {
                                                              return React.createElement(Tab$BtsCore.make, {
                                                                          showTab: tabitem.showTab,
                                                                          maxWidth: "111.6",
                                                                          borderRadius: "15",
                                                                          id: "report-" + String(i),
                                                                          animationName: "none",
                                                                          onClick: (function (param) {
                                                                              return Curry._1(clickItemTab, i);
                                                                            }),
                                                                          children: React.createElement(IconAction$BtsCore.make, {
                                                                                width: "28",
                                                                                height: "28",
                                                                                animation: "leftRight",
                                                                                src: tabitem.tabImage
                                                                              })
                                                                        });
                                                            }), state.tabitems))
                                                })
                                          }), React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "no",
                                            children: React.createElement(Button$BtsCore.make, {
                                                  disabled: state.showProgress,
                                                  onClick: addForm,
                                                  children: null
                                                }, React.createElement(IconAction$BtsCore.make, {
                                                      animation: "circle",
                                                      src: Icons$BtsCore.addWhite
                                                    }), React.createElement(ReactIntl.FormattedMessage, {
                                                      id: "add",
                                                      defaultMessage: "Add"
                                                    }))
                                          }), React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "no",
                                            children: React.createElement(Button$BtsCore.make, {
                                                  disabled: state.showProgress,
                                                  onClick: insertForm,
                                                  children: null
                                                }, React.createElement(IconAction$BtsCore.make, {
                                                      animation: "leftRight",
                                                      src: Icons$BtsCore.saveWhite
                                                    }), React.createElement(ReactIntl.FormattedMessage, {
                                                      id: "save",
                                                      defaultMessage: "Save"
                                                    }))
                                          }))
                                }), match$1 !== 0 ? (
                                match$1 !== 1 ? $$Array.mapi((function (i, settitem) {
                                          return React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "24",
                                                          left: "24",
                                                          xs: "auto",
                                                          children: React.createElement(Switch$BtsCore.make, {
                                                                right: "0",
                                                                checked: settitem.showLimit,
                                                                circleColor: SwitchColor$BtsCore.circle(settitem.showLimit),
                                                                linearColor: SwitchColor$BtsCore.linear(settitem.showLimit),
                                                                fontColor: SwitchColor$BtsCore.font(settitem.showLimit),
                                                                disabled: state.showProgress,
                                                                onClick: (function (param) {
                                                                    return Curry._2(showLimit, settitem.showLimit, i);
                                                                  }),
                                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                                      id: "Formor.limit",
                                                                      defaultMessage: "Limit"
                                                                    })
                                                              })
                                                        }), settitem.showLimit ? React.createElement(GridItem$BtsCore.make, {
                                                            style: {
                                                              height: "2500px"
                                                            },
                                                            top: "0",
                                                            right: "24",
                                                            bottom: "0",
                                                            left: "24",
                                                            xs: "auto",
                                                            children: $$Array.mapi((function (di, dertitem) {
                                                                    return React.createElement(ExpansionPanel$BtsCore.make, {
                                                                                showPanel: dertitem.showPanel,
                                                                                children: /* tuple */[
                                                                                  React.createElement(ExpansionSummary$BtsCore.make, {
                                                                                        showSummary: dertitem.showPanel,
                                                                                        onClick: (function (param) {
                                                                                            return Curry._4(showPanel, dertitem.dertment, i, di, dertitem.operitems);
                                                                                          }),
                                                                                        children: /* tuple */[
                                                                                          React.createElement(ExpansionBasis$BtsCore.make, {
                                                                                                children: React.createElement(Typography$BtsCore.make, {
                                                                                                      variant: "subheading",
                                                                                                      color: "rgba(0,0,0,0.8)",
                                                                                                      children: dertitem.dertment
                                                                                                    })
                                                                                              }),
                                                                                          React.createElement(IconGeneral$BtsCore.make, {
                                                                                                src: dertitem.showPanel ? Icons$BtsCore.arrowUpBlack : Icons$BtsCore.arrowDownBlack
                                                                                              })
                                                                                        ]
                                                                                      }),
                                                                                  React.createElement(GridContainer$BtsCore.make, {
                                                                                        direction: "column",
                                                                                        justify: "start",
                                                                                        alignItem: "stretch",
                                                                                        children: $$Array.mapi((function (oi, operitem) {
                                                                                                return React.createElement(GridItem$BtsCore.make, {
                                                                                                            right: "0",
                                                                                                            bottom: "0",
                                                                                                            left: "0",
                                                                                                            xs: "auto",
                                                                                                            children: React.createElement(GridContainer$BtsCore.make, {
                                                                                                                  direction: "row",
                                                                                                                  justify: "center",
                                                                                                                  alignItem: "center",
                                                                                                                  children: null
                                                                                                                }, React.createElement(GridItem$BtsCore.make, {
                                                                                                                      top: "0",
                                                                                                                      right: "0",
                                                                                                                      bottom: "0",
                                                                                                                      left: "0",
                                                                                                                      xs: "auto",
                                                                                                                      children: React.createElement(Typography$BtsCore.make, {
                                                                                                                            variant: "body1",
                                                                                                                            color: "rgba(0,0,0,0.8)",
                                                                                                                            children: operitem.userid
                                                                                                                          })
                                                                                                                    }), React.createElement(GridItem$BtsCore.make, {
                                                                                                                      top: "0",
                                                                                                                      right: "0",
                                                                                                                      bottom: "0",
                                                                                                                      left: "0",
                                                                                                                      xs: "auto",
                                                                                                                      children: React.createElement(Typography$BtsCore.make, {
                                                                                                                            variant: "body1",
                                                                                                                            color: "rgba(0,0,0,0.8)",
                                                                                                                            children: operitem.name
                                                                                                                          })
                                                                                                                    }), React.createElement(GridItem$BtsCore.make, {
                                                                                                                      top: "0",
                                                                                                                      bottom: "0",
                                                                                                                      xs: "no",
                                                                                                                      children: React.createElement(Switch$BtsCore.make, {
                                                                                                                            right: "0",
                                                                                                                            checked: operitem.showOper,
                                                                                                                            circleColor: SwitchColor$BtsCore.circle(operitem.showOper),
                                                                                                                            linearColor: SwitchColor$BtsCore.linear(operitem.showOper),
                                                                                                                            fontColor: SwitchColor$BtsCore.font(operitem.showOper),
                                                                                                                            disabled: state.showProgress,
                                                                                                                            onClick: (function (param) {
                                                                                                                                return Curry._3(showOper, i, di, oi);
                                                                                                                              }),
                                                                                                                            children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                                                                  id: "add",
                                                                                                                                  defaultMessage: "Add"
                                                                                                                                })
                                                                                                                          })
                                                                                                                    }))
                                                                                                          });
                                                                                              }), dertitem.operitems)
                                                                                      })
                                                                                ]
                                                                              });
                                                                  }), settitem.dertitems)
                                                          }) : null);
                                        }), state.settitems) : $$Array.mapi((function (i, settitem) {
                                          return React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "24",
                                                          bottom: "0",
                                                          left: "24",
                                                          xs: "auto",
                                                          children: React.createElement(GridContainer$BtsCore.make, {
                                                                direction: "row",
                                                                justify: "center",
                                                                alignItem: "center",
                                                                children: null
                                                              }, React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "0",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(TextFieldOutline$BtsCore.make, {
                                                                          top: "8",
                                                                          type_: "date",
                                                                          value: settitem.stdate,
                                                                          disabled: state.showProgress,
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(changeStdate, $$event.target.value, i);
                                                                            }),
                                                                          children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                id: "Formor.stdate",
                                                                                defaultMessage: "Stdate"
                                                                              })
                                                                        })
                                                                  }), React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "0",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(TextFieldOutline$BtsCore.make, {
                                                                          top: "8",
                                                                          type_: "time",
                                                                          value: settitem.sttime,
                                                                          disabled: state.showProgress,
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(changeSttime, $$event.target.value, i);
                                                                            }),
                                                                          children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                id: "Formor.sttime",
                                                                                defaultMessage: "Sttime"
                                                                              })
                                                                        })
                                                                  }))
                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "24",
                                                          bottom: "0",
                                                          left: "24",
                                                          xs: "auto",
                                                          children: React.createElement(GridContainer$BtsCore.make, {
                                                                direction: "row",
                                                                justify: "center",
                                                                alignItem: "center",
                                                                children: null
                                                              }, React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "0",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(TextFieldOutline$BtsCore.make, {
                                                                          top: "8",
                                                                          type_: "date",
                                                                          value: settitem.endate,
                                                                          disabled: state.showProgress,
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(changeEndate, $$event.target.value, i);
                                                                            }),
                                                                          children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                id: "Formor.endate",
                                                                                defaultMessage: "Endate"
                                                                              })
                                                                        })
                                                                  }), React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "0",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(TextFieldOutline$BtsCore.make, {
                                                                          top: "8",
                                                                          type_: "time",
                                                                          value: settitem.entime,
                                                                          disabled: state.showProgress,
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(changeEntime, $$event.target.value, i);
                                                                            }),
                                                                          children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                id: "Formor.entime",
                                                                                defaultMessage: "Entme"
                                                                              })
                                                                        })
                                                                  }))
                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "0",
                                                          bottom: "0",
                                                          left: "30",
                                                          xs: "auto",
                                                          children: React.createElement(Switch$BtsCore.make, {
                                                                right: "0",
                                                                checked: settitem.showExam,
                                                                circleColor: SwitchColor$BtsCore.circle(settitem.showExam),
                                                                linearColor: SwitchColor$BtsCore.linear(settitem.showExam),
                                                                fontColor: SwitchColor$BtsCore.font(settitem.showExam),
                                                                disabled: state.showProgress,
                                                                onClick: (function (param) {
                                                                    return Curry._1(showExam, i);
                                                                  }),
                                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                                      id: "Formor.examed",
                                                                      defaultMessage: "Examed"
                                                                    })
                                                              })
                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "0",
                                                          bottom: "0",
                                                          left: "80",
                                                          xs: "auto",
                                                          children: React.createElement(Switch$BtsCore.make, {
                                                                right: "0",
                                                                checked: settitem.randOption,
                                                                circleColor: SwitchColor$BtsCore.circle(settitem.randOption),
                                                                linearColor: SwitchColor$BtsCore.linear(settitem.randOption),
                                                                fontColor: SwitchColor$BtsCore.font(settitem.randOption),
                                                                disabled: state.showProgress || !settitem.showExam,
                                                                onClick: (function (param) {
                                                                    return Curry._1(randOption, i);
                                                                  }),
                                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                                      id: "Formor.randopt",
                                                                      defaultMessage: "Randopt"
                                                                    })
                                                              })
                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "0",
                                                          bottom: "0",
                                                          left: "80",
                                                          xs: "auto",
                                                          children: React.createElement(Switch$BtsCore.make, {
                                                                right: "0",
                                                                checked: settitem.randSubtile,
                                                                circleColor: SwitchColor$BtsCore.circle(settitem.randSubtile),
                                                                linearColor: SwitchColor$BtsCore.linear(settitem.randSubtile),
                                                                fontColor: SwitchColor$BtsCore.font(settitem.randSubtile),
                                                                disabled: state.showProgress || !settitem.showExam,
                                                                onClick: (function (param) {
                                                                    return Curry._1(randSubtile, i);
                                                                  }),
                                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                                      id: "Formor.randsub",
                                                                      defaultMessage: "Randsub"
                                                                    })
                                                              })
                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "0",
                                                          bottom: "0",
                                                          left: "80",
                                                          xs: "auto",
                                                          children: React.createElement(Switch$BtsCore.make, {
                                                                right: "0",
                                                                checked: settitem.showRestart,
                                                                circleColor: SwitchColor$BtsCore.circle(settitem.showRestart),
                                                                linearColor: SwitchColor$BtsCore.linear(settitem.showRestart),
                                                                fontColor: SwitchColor$BtsCore.font(settitem.showRestart),
                                                                disabled: state.showProgress || !settitem.showExam,
                                                                onClick: (function (param) {
                                                                    return Curry._1(showRestart, i);
                                                                  }),
                                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                                      id: "Formor.restart",
                                                                      defaultMessage: "Restart"
                                                                    })
                                                              })
                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "0",
                                                          bottom: "0",
                                                          left: "80",
                                                          xs: "no",
                                                          children: React.createElement(TextFieldOutline$BtsCore.make, {
                                                                type_: "number",
                                                                value: settitem.number,
                                                                disabled: state.showProgress || !settitem.showExam,
                                                                onChange: (function ($$event) {
                                                                    return Curry._2(changeNumber, $$event.target.value, i);
                                                                  }),
                                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                                      id: "Formor.number",
                                                                      defaultMessage: "Number"
                                                                    })
                                                              })
                                                        }));
                                        }), state.settitems)
                              ) : $$Array.mapi((function (i, item) {
                                      var match = item.outValue;
                                      var tmp;
                                      switch (match) {
                                        case "droplist" :
                                            tmp = React.createElement(GridContainer$BtsCore.make, {
                                                  direction: "column",
                                                  justify: "center",
                                                  alignItem: "stretch",
                                                  children: $$Array.mapi((function (ai, answeritem) {
                                                          return React.createElement(GridItem$BtsCore.make, {
                                                                      top: "0",
                                                                      right: "0",
                                                                      bottom: "6",
                                                                      left: "0",
                                                                      xs: "auto",
                                                                      children: React.createElement(GridContainer$BtsCore.make, {
                                                                            direction: "row",
                                                                            justify: "start",
                                                                            alignItem: "center",
                                                                            children: null
                                                                          }, React.createElement(GridItem$BtsCore.make, {
                                                                                top: "0",
                                                                                right: "0",
                                                                                bottom: "0",
                                                                                left: "0",
                                                                                xs: "no",
                                                                                children: React.createElement(IconButton$BtsCore.make, {
                                                                                      padding: "4",
                                                                                      disabled: state.showProgress,
                                                                                      children: React.createElement(IconAction$BtsCore.make, {
                                                                                            animation: "leftRight",
                                                                                            src: Icons$BtsCore.radioButtonUncheckedBlack
                                                                                          })
                                                                                    })
                                                                              }), React.createElement(GridItem$BtsCore.make, {
                                                                                top: "0",
                                                                                right: "6",
                                                                                bottom: "0",
                                                                                left: "0",
                                                                                xs: "auto",
                                                                                children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                                      top: "0",
                                                                                      enterBorderColor: AnswerColor$BtsCore.enterBorder(answeritem.showAnswer),
                                                                                      downBorderColor: AnswerColor$BtsCore.downBorder(answeritem.showAnswer),
                                                                                      borderColor: AnswerColor$BtsCore.border(answeritem.showAnswer),
                                                                                      placeholder: "Option",
                                                                                      value: answeritem.value,
                                                                                      disabled: state.showProgress || item.itemDelete,
                                                                                      onChange: (function ($$event) {
                                                                                          return Curry._3(changeText, $$event.target.value, ai, i);
                                                                                        }),
                                                                                      children: null
                                                                                    })
                                                                              }), item.showLine ? React.createElement(GridItem$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "0",
                                                                                  bottom: "0",
                                                                                  left: "0",
                                                                                  xs: "no",
                                                                                  children: React.createElement(IconButton$BtsCore.make, {
                                                                                        padding: "4",
                                                                                        disabled: state.showProgress || item.itemDelete,
                                                                                        onClick: (function (param) {
                                                                                            return Curry._2(clearOption, ai, i);
                                                                                          }),
                                                                                        children: React.createElement(IconAction$BtsCore.make, {
                                                                                              animation: "circle",
                                                                                              src: answeritem.ansrDelete ? Icons$BtsCore.refreshBlack : Icons$BtsCore.clearWarn
                                                                                            })
                                                                                      })
                                                                                }) : null)
                                                                    });
                                                        }), item.answeritems)
                                                });
                                            break;
                                        case "image" :
                                            tmp = React.createElement(ImageUpload$BtsCore.make, {
                                                  webLoad: state.showProgress,
                                                  showDrop: item.showDrop,
                                                  showFile: item.showFile,
                                                  disabled: true
                                                });
                                            break;
                                        case "label" :
                                            tmp = React.createElement(Typography$BtsCore.make, {
                                                  variant: "subtitle2",
                                                  style: {
                                                    paddingRight: "6px",
                                                    paddingLeft: "6px"
                                                  },
                                                  noWrap: true,
                                                  children: null
                                                });
                                            break;
                                        case "text" :
                                            tmp = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  width: "50",
                                                  top: "0",
                                                  left: "0",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  disabled: true,
                                                  children: null
                                                });
                                            break;
                                        case "textarea" :
                                            tmp = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  top: "0",
                                                  left: "0",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  disabled: true,
                                                  children: null
                                                });
                                            break;
                                        case "textline" :
                                            tmp = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                  top: "12",
                                                  bottom: "0",
                                                  left: "0",
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  borderTop: "10",
                                                  borderBottom: "10",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  rows: 3,
                                                  disabled: true,
                                                  children: null
                                                });
                                            break;
                                        default:
                                          tmp = React.createElement(GridContainer$BtsCore.make, {
                                                direction: "column",
                                                justify: "center",
                                                alignItem: "stretch",
                                                children: $$Array.mapi((function (ai, answeritem) {
                                                        return React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "6",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(GridContainer$BtsCore.make, {
                                                                          direction: "row",
                                                                          justify: "start",
                                                                          alignItem: "center",
                                                                          children: null
                                                                        }, React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "0",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: IconAnimation$BtsCore.answerIcon(item.outValue, false)
                                                                                        })
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "auto",
                                                                              children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                                    top: "0",
                                                                                    enterBorderColor: AnswerColor$BtsCore.enterBorder(answeritem.showAnswer),
                                                                                    downBorderColor: AnswerColor$BtsCore.downBorder(answeritem.showAnswer),
                                                                                    borderColor: AnswerColor$BtsCore.border(answeritem.showAnswer),
                                                                                    placeholder: "Option",
                                                                                    value: answeritem.value,
                                                                                    disabled: state.showProgress || item.itemDelete,
                                                                                    onChange: (function ($$event) {
                                                                                        return Curry._3(changeText, $$event.target.value, ai, i);
                                                                                      }),
                                                                                    children: null
                                                                                  })
                                                                            }), item.showLine ? React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                                                                    top: "0",
                                                                                    right: "6",
                                                                                    bottom: "0",
                                                                                    left: "0",
                                                                                    xs: "no",
                                                                                    children: React.createElement(IconButton$BtsCore.make, {
                                                                                          padding: "4",
                                                                                          disabled: state.showProgress || item.itemDelete,
                                                                                          onClick: (function (param) {
                                                                                              return Curry._3(clickElement, item.outValue, ai, i);
                                                                                            }),
                                                                                          children: React.createElement(IconAction$BtsCore.make, {
                                                                                                animation: "leftRight",
                                                                                                src: answeritem.showAnswer ? Icons$BtsCore.doneSuccessful : Icons$BtsCore.errorWarn
                                                                                              })
                                                                                        })
                                                                                  }), React.createElement(GridItem$BtsCore.make, {
                                                                                    top: "0",
                                                                                    right: "0",
                                                                                    bottom: "0",
                                                                                    left: "0",
                                                                                    xs: "no",
                                                                                    children: React.createElement(IconButton$BtsCore.make, {
                                                                                          padding: "4",
                                                                                          disabled: state.showProgress || item.itemDelete,
                                                                                          onClick: (function (param) {
                                                                                              return Curry._2(clearOption, ai, i);
                                                                                            }),
                                                                                          children: React.createElement(IconAction$BtsCore.make, {
                                                                                                animation: "circle",
                                                                                                src: answeritem.ansrDelete ? Icons$BtsCore.refreshBlack : Icons$BtsCore.clearWarn
                                                                                              })
                                                                                        })
                                                                                  })) : null)
                                                                  });
                                                      }), item.answeritems)
                                              });
                                      }
                                      var tmp$1;
                                      if (item.showLine) {
                                        var tmp$2;
                                        if (item.showMore && !item.itemDelete) {
                                          var match$1 = item.outValue;
                                          var tmp$3;
                                          switch (match$1) {
                                            case "checkbox" :
                                                tmp$3 = React.createElement(MenuIcon$BtsCore.make, {
                                                      top: "0",
                                                      right: "8",
                                                      bottom: "0",
                                                      left: "8",
                                                      disablePadding: true,
                                                      topLeft: "12",
                                                      topRight: "12",
                                                      bottomRight: "12",
                                                      bottomLeft: "12",
                                                      children: /* tuple */[
                                                        React.createElement(IconGeneral$BtsCore.make, {
                                                              src: Icons$BtsCore.doneSuccessful
                                                            }),
                                                        React.createElement(ReactIntl.FormattedMessage, {
                                                              id: "desc",
                                                              defaultMessage: "Desc"
                                                            })
                                                      ]
                                                    });
                                                break;
                                            case "radio" :
                                                tmp$3 = React.createElement(React.Fragment, undefined, React.createElement(MenuIcon$BtsCore.make, {
                                                          top: "0",
                                                          right: "8",
                                                          bottom: "0",
                                                          left: "8",
                                                          disablePadding: true,
                                                          topLeft: "12",
                                                          topRight: "12",
                                                          bottomRight: "12",
                                                          bottomLeft: "12",
                                                          children: /* tuple */[
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  src: Icons$BtsCore.doneSuccessful
                                                                }),
                                                            React.createElement(ReactIntl.FormattedMessage, {
                                                                  id: "desc",
                                                                  defaultMessage: "Desc"
                                                                })
                                                          ]
                                                        }), React.createElement(MenuIcon$BtsCore.make, {
                                                          top: "0",
                                                          right: "8",
                                                          bottom: "0",
                                                          left: "8",
                                                          disablePadding: true,
                                                          topLeft: "12",
                                                          topRight: "12",
                                                          bottomRight: "12",
                                                          bottomLeft: "12",
                                                          children: /* tuple */[
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  src: Icons$BtsCore.doneSuccessful
                                                                }),
                                                            React.createElement(ReactIntl.FormattedMessage, {
                                                                  id: "Formor.relevant",
                                                                  defaultMessage: "Relevant"
                                                                })
                                                          ]
                                                        }));
                                                break;
                                            default:
                                              tmp$3 = React.createElement(React.Fragment, undefined, React.createElement(MenuIcon$BtsCore.make, {
                                                        top: "0",
                                                        right: "8",
                                                        bottom: "0",
                                                        left: "8",
                                                        disablePadding: true,
                                                        topLeft: "12",
                                                        topRight: "12",
                                                        bottomRight: "12",
                                                        bottomLeft: "12",
                                                        children: /* tuple */[
                                                          React.createElement(IconGeneral$BtsCore.make, {
                                                                src: Icons$BtsCore.doneSuccessful
                                                              }),
                                                          React.createElement(ReactIntl.FormattedMessage, {
                                                                id: "desc",
                                                                defaultMessage: "Desc"
                                                              })
                                                        ]
                                                      }), React.createElement(MenuIcon$BtsCore.make, {
                                                        top: "0",
                                                        right: "8",
                                                        bottom: "0",
                                                        left: "8",
                                                        disablePadding: true,
                                                        topLeft: "12",
                                                        topRight: "12",
                                                        bottomRight: "12",
                                                        bottomLeft: "12",
                                                        onClick: (function (param) {
                                                            return Curry._2(showVerification, item.showVeri, i);
                                                          }),
                                                        children: /* tuple */[
                                                          React.createElement(IconGeneral$BtsCore.make, {
                                                                src: Icons$BtsCore.doneSuccessful
                                                              }),
                                                          React.createElement(ReactIntl.FormattedMessage, {
                                                                id: "Formor.verification",
                                                                defaultMessage: "Verification"
                                                              })
                                                        ]
                                                      }));
                                          }
                                          tmp$2 = React.createElement(SelectMenu$BtsCore.make, {
                                                top: "100%",
                                                right: "0",
                                                transform: "translate(0, -100%)",
                                                maxWidth: "256",
                                                width: "256",
                                                maxHeight: "280",
                                                minHeight: "0",
                                                topLeft: "12",
                                                topRight: "12",
                                                bottomRight: "12",
                                                bottomLeft: "12",
                                                paddingRight: "8",
                                                paddingLeft: "8",
                                                children: tmp$3
                                              });
                                        } else {
                                          tmp$2 = null;
                                        }
                                        var match$2 = item.outValue;
                                        var tmp$4;
                                        var exit = 0;
                                        switch (match$2) {
                                          case "checkbox" :
                                          case "droplist" :
                                          case "radio" :
                                              exit = 1;
                                              break;
                                          default:
                                            tmp$4 = null;
                                        }
                                        if (exit === 1) {
                                          tmp$4 = React.createElement(GridItem$BtsCore.make, {
                                                top: "0",
                                                right: "0",
                                                bottom: "0",
                                                left: "0",
                                                xs: "no",
                                                children: React.createElement(IconButton$BtsCore.make, {
                                                      padding: "8",
                                                      disabled: state.showProgress || item.itemDelete,
                                                      onClick: (function (param) {
                                                          return Curry._1(addItem, i);
                                                        }),
                                                      children: null
                                                    }, React.createElement(Tooltip$BtsCore.make, {
                                                          location: "top",
                                                          backgroundColor: "rgba(255,0,0,0.8)",
                                                          children: React.createElement(ReactIntl.FormattedMessage, {
                                                                id: "add",
                                                                defaultMessage: "Add"
                                                              })
                                                        }), React.createElement(IconAction$BtsCore.make, {
                                                          animation: "circle",
                                                          src: Icons$BtsCore.addBlack
                                                        }))
                                              });
                                        }
                                        tmp$1 = React.createElement(React.Fragment, undefined, item.showVeri ? React.createElement(GridItem$BtsCore.make, {
                                                    top: "0",
                                                    bottom: "0",
                                                    xs: "auto",
                                                    children: React.createElement(GridContainer$BtsCore.make, {
                                                          direction: "row",
                                                          justify: "start",
                                                          alignItem: "center",
                                                          children: null
                                                        }, React.createElement(GridItem$BtsCore.make, {
                                                              top: "0",
                                                              right: "0",
                                                              bottom: "0",
                                                              left: "0",
                                                              xs: "auto",
                                                              children: null
                                                            }, React.createElement(SelectStandard$BtsCore.make, {
                                                                  top: "0",
                                                                  bottom: "0",
                                                                  enterBorderColor: "transparent",
                                                                  downBorderColor: "transparent",
                                                                  borderColor: "transparent",
                                                                  value: item.type_,
                                                                  disabled: state.showProgress || item.itemDelete,
                                                                  onClick: (function (param) {
                                                                      return Curry._1(showType, i);
                                                                    }),
                                                                  children: /* tuple */[
                                                                    item.showType && !item.itemDelete ? React.createElement(SelectMenu$BtsCore.make, {
                                                                            top: "50%",
                                                                            transform: "translate(0, -50%)",
                                                                            maxHeight: "280",
                                                                            minHeight: "0",
                                                                            topLeft: "12",
                                                                            topRight: "12",
                                                                            bottomRight: "12",
                                                                            bottomLeft: "12",
                                                                            paddingRight: "8",
                                                                            paddingLeft: "8",
                                                                            children: $$Array.map((function (typeitem) {
                                                                                    return React.createElement(MenuItem$BtsCore.make, {
                                                                                                top: "0",
                                                                                                right: "8",
                                                                                                bottom: "0",
                                                                                                left: "8",
                                                                                                disablePadding: typeitem.optionPadding,
                                                                                                topLeft: "12",
                                                                                                topRight: "12",
                                                                                                bottomRight: "12",
                                                                                                bottomLeft: "12",
                                                                                                onClick: (function (param) {
                                                                                                    return Curry._2(clickType, i, typeitem.value);
                                                                                                  }),
                                                                                                children: typeitem.value
                                                                                              });
                                                                                  }), item.typeitems)
                                                                          }) : null,
                                                                    React.createElement(IconGeneral$BtsCore.make, {
                                                                          animation: IconAnimation$BtsCore.topDownRorate(item.showType),
                                                                          src: Icons$BtsCore.arrowDownBlack
                                                                        })
                                                                  ]
                                                                }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                                  showBackground: item.showType,
                                                                  backgroundColor: "transparent",
                                                                  onClick: (function (param) {
                                                                      return Curry._1(showType, i);
                                                                    })
                                                                })), React.createElement(GridItem$BtsCore.make, {
                                                              top: "0",
                                                              right: "0",
                                                              bottom: "0",
                                                              left: "0",
                                                              xs: "auto",
                                                              children: null
                                                            }, React.createElement(SelectStandard$BtsCore.make, {
                                                                  top: "0",
                                                                  bottom: "0",
                                                                  enterBorderColor: "transparent",
                                                                  downBorderColor: "transparent",
                                                                  borderColor: "transparent",
                                                                  value: item.operation,
                                                                  disabled: state.showProgress || item.itemDelete,
                                                                  onClick: (function (param) {
                                                                      return Curry._1(showOperation, i);
                                                                    }),
                                                                  children: /* tuple */[
                                                                    item.showOperation && !item.itemDelete ? React.createElement(SelectMenu$BtsCore.make, {
                                                                            top: "50%",
                                                                            transform: "translate(0, -50%)",
                                                                            maxHeight: "280",
                                                                            minHeight: "0",
                                                                            topLeft: "12",
                                                                            topRight: "12",
                                                                            bottomRight: "12",
                                                                            bottomLeft: "12",
                                                                            paddingRight: "8",
                                                                            paddingLeft: "8",
                                                                            children: $$Array.map((function (operationitem) {
                                                                                    return React.createElement(MenuItem$BtsCore.make, {
                                                                                                top: "0",
                                                                                                right: "8",
                                                                                                bottom: "0",
                                                                                                left: "8",
                                                                                                disablePadding: operationitem.optionPadding,
                                                                                                topLeft: "12",
                                                                                                topRight: "12",
                                                                                                bottomRight: "12",
                                                                                                bottomLeft: "12",
                                                                                                onClick: (function (param) {
                                                                                                    return Curry._2(clickOperation, operationitem.value, i);
                                                                                                  }),
                                                                                                children: operationitem.value
                                                                                              });
                                                                                  }), item.operationitems)
                                                                          }) : null,
                                                                    React.createElement(IconGeneral$BtsCore.make, {
                                                                          animation: IconAnimation$BtsCore.topDownRorate(item.showOperation),
                                                                          src: Icons$BtsCore.arrowDownBlack
                                                                        })
                                                                  ]
                                                                }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                                  showBackground: item.showOperation,
                                                                  backgroundColor: "transparent",
                                                                  onClick: (function (param) {
                                                                      return Curry._1(showOperation, i);
                                                                    })
                                                                })), React.createElement(GridItem$BtsCore.make, {
                                                              top: "0",
                                                              right: "0",
                                                              bottom: "0",
                                                              left: "0",
                                                              xs: "auto",
                                                              children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "0",
                                                                    left: "0",
                                                                    value: item.area,
                                                                    disabled: state.showProgress || item.itemDelete,
                                                                    onChange: (function ($$event) {
                                                                        return Curry._2(changeArea, $$event.target.value, i);
                                                                      }),
                                                                    children: null
                                                                  })
                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                              top: "0",
                                                              right: "0",
                                                              bottom: "0",
                                                              left: "0",
                                                              xs: "auto",
                                                              children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "0",
                                                                    left: "0",
                                                                    value: item.eror,
                                                                    disabled: state.showProgress || item.itemDelete,
                                                                    onChange: (function ($$event) {
                                                                        return Curry._2(changeEror, $$event.target.value, i);
                                                                      }),
                                                                    children: null
                                                                  })
                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                              top: "0",
                                                              right: "0",
                                                              bottom: "0",
                                                              left: "0",
                                                              xs: "no",
                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                    padding: "8",
                                                                    disabled: state.showProgress || item.itemDelete,
                                                                    onClick: (function (param) {
                                                                        return Curry._1(clearCondition, i);
                                                                      }),
                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                          animation: "circle",
                                                                          src: Icons$BtsCore.clearBlack
                                                                        })
                                                                  })
                                                            }))
                                                  }) : null, React.createElement(GridItem$BtsCore.make, {
                                                  xs: "auto",
                                                  children: React.createElement(Divider$BtsCore.make, { })
                                                }), React.createElement(GridItem$BtsCore.make, {
                                                  top: "0",
                                                  right: "0",
                                                  bottom: "0",
                                                  left: "0",
                                                  xs: "auto",
                                                  children: React.createElement(GridContainer$BtsCore.make, {
                                                        direction: "rowReverse",
                                                        justify: "start",
                                                        alignItem: "center",
                                                        children: null
                                                      }, React.createElement(GridItem$BtsCore.make, {
                                                            top: "0",
                                                            right: "0",
                                                            bottom: "0",
                                                            left: "0",
                                                            xs: "no",
                                                            children: null
                                                          }, React.createElement(IconButton$BtsCore.make, {
                                                                padding: "8",
                                                                disabled: state.showProgress || item.itemDelete,
                                                                onClick: (function (param) {
                                                                    return Curry._1(showMore, i);
                                                                  }),
                                                                children: null
                                                              }, React.createElement(Tooltip$BtsCore.make, {
                                                                    location: "top",
                                                                    backgroundColor: "rgba(255,0,0,0.8)",
                                                                    children: React.createElement(ReactIntl.FormattedMessage, {
                                                                          id: "more",
                                                                          defaultMessage: "More"
                                                                        })
                                                                  }), React.createElement(IconAction$BtsCore.make, {
                                                                    animation: "circle",
                                                                    src: Icons$BtsCore.moreVertBlack
                                                                  })), tmp$2, React.createElement(BackgroundBoard$BtsCore.make, {
                                                                showBackground: item.showMore,
                                                                backgroundColor: "transparent",
                                                                onClick: (function (param) {
                                                                    return Curry._1(showMore, i);
                                                                  })
                                                              })), React.createElement(GridItem$BtsCore.make, {
                                                            top: "0",
                                                            right: "0",
                                                            bottom: "0",
                                                            left: "0",
                                                            xs: "no",
                                                            children: React.createElement(Switch$BtsCore.make, {
                                                                  right: "0",
                                                                  checked: item.showCheck,
                                                                  circleColor: SwitchColor$BtsCore.circle(item.showCheck),
                                                                  linearColor: SwitchColor$BtsCore.linear(item.showCheck),
                                                                  fontColor: SwitchColor$BtsCore.font(item.showCheck),
                                                                  disabled: state.showProgress || item.itemDelete,
                                                                  onClick: (function (param) {
                                                                      return Curry._1(checkItem, i);
                                                                    }),
                                                                  children: React.createElement(ReactIntl.FormattedMessage, {
                                                                        id: "need",
                                                                        defaultMessage: "Need"
                                                                      })
                                                                })
                                                          }), React.createElement(GridItem$BtsCore.make, {
                                                            style: {
                                                              borderRight: "1px solid rgba(0,0,0,0.12)",
                                                              marginRight: "12px"
                                                            },
                                                            left: "0",
                                                            xs: "no",
                                                            children: null
                                                          }), React.createElement(GridItem$BtsCore.make, {
                                                            top: "0",
                                                            right: "0",
                                                            bottom: "0",
                                                            left: "0",
                                                            xs: "no",
                                                            children: React.createElement(IconButton$BtsCore.make, {
                                                                  padding: "8",
                                                                  disabled: state.showProgress,
                                                                  onClick: (function (param) {
                                                                      return Curry._1(deleteItem, i);
                                                                    }),
                                                                  children: null
                                                                }, React.createElement(Tooltip$BtsCore.make, {
                                                                      location: "top",
                                                                      backgroundColor: "rgba(255,0,0,0.8)",
                                                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                                                            id: item.itemDelete ? "refresh" : "deleted",
                                                                            defaultMessage: item.itemDelete ? "Refresh" : "Deleted"
                                                                          })
                                                                    }), React.createElement(IconAction$BtsCore.make, {
                                                                      animation: "leftRight",
                                                                      src: item.itemDelete ? Icons$BtsCore.refreshBlack : Icons$BtsCore.deleteBlack
                                                                    }))
                                                          }), React.createElement(GridItem$BtsCore.make, {
                                                            top: "0",
                                                            right: "0",
                                                            bottom: "0",
                                                            left: "0",
                                                            xs: "no",
                                                            children: React.createElement(IconButton$BtsCore.make, {
                                                                  padding: "8",
                                                                  disabled: state.showProgress || item.itemDelete,
                                                                  children: null
                                                                }, React.createElement(Tooltip$BtsCore.make, {
                                                                      location: "top",
                                                                      backgroundColor: "rgba(255,0,0,0.8)",
                                                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                                                            id: "copy",
                                                                            defaultMessage: "Copy"
                                                                          })
                                                                    }), React.createElement(IconAction$BtsCore.make, {
                                                                      animation: "leftRight",
                                                                      src: Icons$BtsCore.fileCopyBlack
                                                                    }))
                                                          }), tmp$4)
                                                }));
                                      } else {
                                        tmp$1 = null;
                                      }
                                      return React.createElement(GridItem$BtsCore.make, {
                                                  top: "0",
                                                  right: "24",
                                                  left: "24",
                                                  xs: "auto",
                                                  children: React.createElement(CardOrPaperBoard$BtsCore.make, {
                                                        onClick: (function (param) {
                                                            return Curry._1(clickBoardPaper, i);
                                                          }),
                                                        showLine: item.showLine,
                                                        children: React.createElement(GridContainer$BtsCore.make, {
                                                              direction: "column",
                                                              justify: "start",
                                                              alignItem: "stretch",
                                                              children: null
                                                            }, React.createElement(GridItem$BtsCore.make, {
                                                                  top: "0",
                                                                  bottom: "0",
                                                                  xs: "auto",
                                                                  children: React.createElement(GridContainer$BtsCore.make, {
                                                                        direction: "row",
                                                                        justify: "center",
                                                                        alignItem: "center",
                                                                        children: null
                                                                      }, React.createElement(GridItem$BtsCore.make, {
                                                                            top: "0",
                                                                            right: "0",
                                                                            bottom: "0",
                                                                            left: "0",
                                                                            xs: "auto",
                                                                            children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "0",
                                                                                  left: "0",
                                                                                  value: item.title,
                                                                                  disabled: state.showProgress || item.itemDelete,
                                                                                  onChange: (function ($$event) {
                                                                                      return Curry._2(changeTitle, $$event.target.value, i);
                                                                                    }),
                                                                                  children: null
                                                                                })
                                                                          }), item.showLine ? React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "0",
                                                                                  bottom: "0",
                                                                                  left: "0",
                                                                                  xs: "no",
                                                                                  children: React.createElement(IconButton$BtsCore.make, {
                                                                                        padding: "10",
                                                                                        disabled: state.showProgress || item.itemDelete,
                                                                                        children: React.createElement(IconAction$BtsCore.make, {
                                                                                              animation: "leftRight",
                                                                                              src: Icons$BtsCore.collectionsBlack
                                                                                            })
                                                                                      })
                                                                                }), React.createElement(GridItem$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "0",
                                                                                  bottom: "0",
                                                                                  left: "0",
                                                                                  width: "156px",
                                                                                  xs: "no",
                                                                                  children: null
                                                                                }, React.createElement(SelectOutline$BtsCore.make, {
                                                                                      top: "0",
                                                                                      borderColor: "rgba(0,0,0,0.2)",
                                                                                      value: item.outValue,
                                                                                      disabled: state.showProgress || item.itemDelete,
                                                                                      onClick: (function (param) {
                                                                                          return Curry._1(showOut, i);
                                                                                        }),
                                                                                      children: /* tuple */[
                                                                                        item.showOut && !item.itemDelete ? React.createElement(SelectMenu$BtsCore.make, {
                                                                                                top: "50%",
                                                                                                transform: "translate(0, -50%)",
                                                                                                maxHeight: "280",
                                                                                                minHeight: "0",
                                                                                                topLeft: "12",
                                                                                                topRight: "12",
                                                                                                bottomRight: "12",
                                                                                                bottomLeft: "12",
                                                                                                paddingRight: "8",
                                                                                                paddingLeft: "8",
                                                                                                children: $$Array.map((function (opticonitem) {
                                                                                                        return React.createElement(MenuIcon$BtsCore.make, {
                                                                                                                    top: "0",
                                                                                                                    right: "8",
                                                                                                                    bottom: "0",
                                                                                                                    left: "8",
                                                                                                                    disablePadding: opticonitem.opticonPadding,
                                                                                                                    topLeft: "12",
                                                                                                                    topRight: "12",
                                                                                                                    bottomRight: "12",
                                                                                                                    bottomLeft: "12",
                                                                                                                    onClick: (function (param) {
                                                                                                                        return Curry._2(showValue, opticonitem.value, i);
                                                                                                                      }),
                                                                                                                    children: /* tuple */[
                                                                                                                      React.createElement(IconGeneral$BtsCore.make, {
                                                                                                                            src: opticonitem.icon
                                                                                                                          }),
                                                                                                                      opticonitem.value
                                                                                                                    ]
                                                                                                                  });
                                                                                                      }), item.opticonitems)
                                                                                              }) : null,
                                                                                        React.createElement(IconGeneral$BtsCore.make, {
                                                                                              animation: IconAnimation$BtsCore.topDownRorate(item.showOut),
                                                                                              src: Icons$BtsCore.arrowDownBlack
                                                                                            })
                                                                                      ]
                                                                                    }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                                                      showBackground: item.showOut,
                                                                                      backgroundColor: "transparent",
                                                                                      onClick: (function (param) {
                                                                                          return Curry._1(showOut, i);
                                                                                        })
                                                                                    }))) : null)
                                                                }), React.createElement(GridItem$BtsCore.make, {
                                                                  top: "0",
                                                                  bottom: "0",
                                                                  xs: "auto",
                                                                  children: tmp
                                                                }), tmp$1)
                                                      })
                                                });
                                    }), state.items))
                      })
                }), React.createElement(SnackbarYoutube$BtsCore.make, {
                  showYoutube: state.showYoutube,
                  position: "bottomLeft",
                  children: /* tuple */[
                    React.createElement("span", undefined, state.youtubeText),
                    null
                  ]
                }));
}

var make = Formor;

export {
  newitem ,
  newansweritem ,
  reducer ,
  initialState ,
  make ,
  
}
/*  Not a pure module */
