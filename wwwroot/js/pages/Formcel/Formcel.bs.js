// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as NewFacetube$BtsCore from "../../example/Facebook/NewFacetube.bs.js";
import * as GeneralUpload$BtsCore from "../../example/Uploads/GeneralUpload.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as SnackbarYoutube$BtsCore from "../../material-ui/core/Snackbar/SnackbarYoutube.bs.js";

((require('../../../scss/pages/Together/together.scss')));

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* SettingError */0 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: !state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  showDrop: state.showDrop,
                  showFile: state.showFile,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* SettingFormLoad */1 :
          return {
                  formLoad: !state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  showDrop: state.showDrop,
                  showFile: state.showFile,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionShowProgress */2 :
          return {
                  formLoad: state.formLoad,
                  showProgress: !state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  showDrop: state.showDrop,
                  showFile: state.showFile,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowFile */3 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  showDrop: state.showDrop,
                  showFile: !state.showFile,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* ActionPermissItems */0 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: action[0],
                  update: action[1],
                  delete: action[2],
                  export: action[3],
                  showDrop: state.showDrop,
                  showFile: state.showFile,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowDrop */1 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  showDrop: action[0],
                  showFile: state.showFile,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionSnackBar */2 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  showDrop: state.showDrop,
                  showFile: state.showFile,
                  showYoutube: action[1],
                  youtubeText: action[0]
                };
      
    }
  }
}

var initialState = {
  formLoad: false,
  showProgress: true,
  error: false,
  insert: false,
  update: false,
  delete: false,
  export: false,
  showDrop: false,
  showFile: false,
  showYoutube: false,
  youtubeText: ""
};

function Formcel(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var fileRef = React.useRef(null);
  var permissAJax = function (param) {
    Axiosapi$BtsCore.Form.permiss(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* ActionPermissItems */Block.__(0, [
                                  response.data.insert,
                                  response.data.update,
                                  response.data.delete,
                                  response.data.export
                                ])), Curry._1(dispatch, /* ActionShowProgress */2)));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          var match = state.formLoad;
          if (match) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */1);
          var timeId = permissAJax(undefined);
          return (function (param) {
                    return timeId;
                  });
        }));
  var dragOver = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowDrop */Block.__(1, [true]));
        }));
  var dragLeave = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowDrop */Block.__(1, [false]));
        }));
  var dropFile = React.useCallback((function (value) {
          Curry._1(dispatch, /* ActionShowProgress */2);
          return Curry._1(dispatch, /* ShowDrop */Block.__(1, [false]));
        }));
  var uploadFile = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ActionShowProgress */2);
        }));
  var chooseFile = React.useCallback((function (param) {
          var el = fileRef.current;
          if (!(el == null)) {
            el.click();
            return ;
          }
          
        }));
  return React.createElement(React.Fragment, undefined, React.createElement(NewFacetube$BtsCore.make, {
                  showProgress: state.showProgress,
                  error: state.error,
                  children: React.createElement(GridItem$BtsCore.make, {
                        style: Together$BtsCore.marginAuto,
                        top: "0",
                        right: "32",
                        bottom: "0",
                        left: "32",
                        xs: "12",
                        maxWidth: "770px",
                        children: React.createElement(GridContainer$BtsCore.make, {
                              direction: "column",
                              justify: "center",
                              alignItem: "stretch",
                              children: null
                            }, React.createElement(GridItem$BtsCore.make, {
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(GeneralUpload$BtsCore.make, {
                                        webLoad: state.showProgress,
                                        showDrop: state.showDrop,
                                        fileRef: fileRef,
                                        onDragOver: dragOver,
                                        onDragLeave: dragLeave,
                                        onDrop: (function ($$event) {
                                            return Curry._1(dropFile, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0));
                                          }),
                                        disabled: state.showProgress,
                                        onClick: chooseFile,
                                        onChange: (function ($$event) {
                                            return Curry._1(uploadFile, Caml_array.caml_array_get($$event.target.files, 0));
                                          })
                                      })
                                }), React.createElement(GridItem$BtsCore.make, {
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: null
                                }))
                      })
                }), React.createElement(SnackbarYoutube$BtsCore.make, {
                  showYoutube: state.showYoutube,
                  position: "bottomLeft",
                  children: /* tuple */[
                    React.createElement("span", undefined, state.youtubeText),
                    null
                  ]
                }));
}

var make = Formcel;

export {
  reducer ,
  initialState ,
  make ,
  
}
/*  Not a pure module */
