// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Path$BtsCore from "../../features/Path.bs.js";
import * as Status$BtsCore from "../../features/Status.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as YoutubeResend$BtsCore from "../../example/Account/Resend/YoutubeResend.bs.js";

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            formLoad: !state.formLoad,
            error: state.error,
            loading: state.loading,
            showYoutube: state.showYoutube,
            youtubeText: state.youtubeText,
            disabled: state.disabled,
            fstPassword: state.fstPassword,
            sndPassword: state.sndPassword
          };
  }
  switch (action.tag | 0) {
    case /* ChangeFstPassword */0 :
        return {
                formLoad: state.formLoad,
                error: state.error,
                loading: state.loading,
                showYoutube: state.showYoutube,
                youtubeText: state.youtubeText,
                disabled: state.disabled,
                fstPassword: action[0],
                sndPassword: state.sndPassword
              };
    case /* ChangeSndPassword */1 :
        return {
                formLoad: state.formLoad,
                error: state.error,
                loading: state.loading,
                showYoutube: state.showYoutube,
                youtubeText: state.youtubeText,
                disabled: state.disabled,
                fstPassword: state.fstPassword,
                sndPassword: action[0]
              };
    case /* ActionOtherLoad */2 :
        var other = action[0];
        return {
                formLoad: state.formLoad,
                error: state.error,
                loading: other,
                showYoutube: state.showYoutube,
                youtubeText: state.youtubeText,
                disabled: other,
                fstPassword: state.fstPassword,
                sndPassword: state.sndPassword
              };
    case /* ActionErrorLoad */3 :
        return {
                formLoad: state.formLoad,
                error: action[0],
                loading: state.loading,
                showYoutube: state.showYoutube,
                youtubeText: state.youtubeText,
                disabled: state.disabled,
                fstPassword: state.fstPassword,
                sndPassword: state.sndPassword
              };
    case /* ActionSnackBar */4 :
        return {
                formLoad: state.formLoad,
                error: state.error,
                loading: state.loading,
                showYoutube: action[1],
                youtubeText: action[0],
                disabled: state.disabled,
                fstPassword: state.fstPassword,
                sndPassword: state.sndPassword
              };
    
  }
}

var initialState = {
  formLoad: false,
  error: false,
  loading: false,
  showYoutube: false,
  youtubeText: "",
  disabled: false,
  fstPassword: "",
  sndPassword: ""
};

function Resend(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var checkNewAJax = function (param) {
    Axiosapi$BtsCore.Form.checkNew(Data$BtsCore.userData(sessionStorage.getItem("newid"))).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                console.log("check");
                tmp = undefined;
              } else {
                tmp = ReasonReactRouter.push(Path$BtsCore.loginPath);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          if (state.formLoad) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */0);
          var timeId = checkNewAJax(undefined);
          return (function (param) {
                    return timeId;
                  });
        }));
  var changeFstPassword = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFstPassword */Block.__(0, [value]));
        }));
  var changeSndPassword = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeSndPassword */Block.__(1, [value]));
        }));
  var restoreAction = function (param) {
    Curry._1(dispatch, /* ActionErrorLoad */Block.__(3, [true]));
    setTimeout((function (param) {
            Curry._1(dispatch, /* ActionErrorLoad */Block.__(3, [false]));
            return Curry._1(dispatch, /* ActionOtherLoad */Block.__(2, [false]));
          }), 500);
    
  };
  var barShowRestoreAction = function (youtubeText) {
    Curry._1(dispatch, /* ActionSnackBar */Block.__(4, [
            youtubeText,
            true
          ]));
    setTimeout((function (param) {
            return Curry._1(dispatch, /* ActionSnackBar */Block.__(4, [
                          "",
                          false
                        ]));
          }), 5000);
    
  };
  var checkResendData = function (param) {
    if (state.fstPassword !== state.sndPassword) {
      restoreAction(undefined);
      return barShowRestoreAction(Status$BtsCore.accountModule("errorDifPassword"));
    } else {
      Curry._1(dispatch, /* ActionOtherLoad */Block.__(2, [true]));
      Axiosapi$BtsCore.Resend.resendUser(Data$BtsCore.otherData(sessionStorage.getItem("newid"), state.sndPassword)).then((function (response) {
                var match = response.data.status;
                var tmp;
                switch (match) {
                  case "istrue" :
                  case "nousers" :
                      tmp = ReasonReactRouter.push(Path$BtsCore.loginPath);
                      break;
                  default:
                    restoreAction(undefined);
                    tmp = barShowRestoreAction(Status$BtsCore.accountModule(response.data.status));
                }
                return Promise.resolve(tmp);
              })).catch((function (error) {
              return Promise.resolve((console.log(error), undefined));
            }));
      return ;
    }
  };
  var keydownFstPassword = React.useCallback((function (keyCode) {
          if (keyCode === 13) {
            return checkResendData(undefined);
          }
          
        }));
  var keydownSndPassword = React.useCallback((function (keyCode) {
          if (keyCode === 13) {
            return checkResendData(undefined);
          }
          
        }));
  var nextForm = React.useCallback((function (param) {
          return checkResendData(undefined);
        }));
  return React.createElement(YoutubeResend$BtsCore.make, {
              error: state.error,
              loading: state.loading,
              showYoutube: state.showYoutube,
              youtubeText: state.youtubeText,
              disabled: state.disabled,
              fstPassword: state.fstPassword,
              changeFstPassword: (function ($$event) {
                  return Curry._1(changeFstPassword, $$event.target.value);
                }),
              keydownFstPassword: (function ($$event) {
                  return Curry._1(keydownFstPassword, $$event.keyCode);
                }),
              sndPassword: state.sndPassword,
              changeSndPassword: (function ($$event) {
                  return Curry._1(changeSndPassword, $$event.target.value);
                }),
              keydownSndPassword: (function ($$event) {
                  return Curry._1(keydownSndPassword, $$event.keyCode);
                }),
              backForm: (function (param) {
                  return ReasonReactRouter.push(Path$BtsCore.loginPath);
                }),
              nextForm: nextForm
            });
}

var make = Resend;

export {
  reducer ,
  initialState ,
  make ,
  
}
/* react Not a pure module */
