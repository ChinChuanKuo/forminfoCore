// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReactIntl from "react-intl";
import * as Tab$BtsCore from "../../material-ui/core/Tabs/Tab.bs.js";
import * as Card$BtsCore from "../../material-ui/core/Card/Card.bs.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Tabs$BtsCore from "../../material-ui/core/Tabs/Tabs.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as Button$BtsCore from "../../material-ui/core/Button/Button.bs.js";
import * as Status$BtsCore from "../../features/Status.bs.js";
import * as OutSide$BtsCore from "../../styles/OutSide/OutSide.bs.js";
import * as Tooltip$BtsCore from "../../material-ui/core/Tooltip/Tooltip.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as DialogFull$BtsCore from "../../material-ui/core/Dialog/DialogFull.bs.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as Typography$BtsCore from "../../material-ui/core/Typography/Typography.bs.js";
import * as DialogTitle$BtsCore from "../../material-ui/core/Dialog/DialogTitle.bs.js";
import * as ImageUpload$BtsCore from "../../example/Uploads/ImageUpload.bs.js";
import * as NewFacetube$BtsCore from "../../example/Facebook/NewFacetube.bs.js";
import * as DialogActions$BtsCore from "../../material-ui/core/Dialog/DialogActions.bs.js";
import * as DialogContent$BtsCore from "../../material-ui/core/Dialog/DialogContent.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as SnackbarYoutube$BtsCore from "../../material-ui/core/Snackbar/SnackbarYoutube.bs.js";
import * as CardOrPaperBoard$BtsCore from "../../example/Boards/CardOrPaperBoard.bs.js";
import * as TextFieldOutline$BtsCore from "../../material-ui/core/TextField/TextFieldOutline.bs.js";
import * as DialogContentText$BtsCore from "../../material-ui/core/Dialog/DialogContentText.bs.js";

((require('../../../scss/pages/Together/together.scss')));

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* SettingError */0 :
          var newrecord = Caml_obj.caml_obj_dup(state);
          newrecord.error = !state.error;
          return newrecord;
      case /* SettingFormLoad */1 :
          var newrecord$1 = Caml_obj.caml_obj_dup(state);
          newrecord$1.formLoad = !state.formLoad;
          return newrecord$1;
      case /* ActionShowProgress */2 :
          var newrecord$2 = Caml_obj.caml_obj_dup(state);
          newrecord$2.showProgress = !state.showProgress;
          return newrecord$2;
      case /* CloseAnimationFull */3 :
          var newrecord$3 = Caml_obj.caml_obj_dup(state);
          newrecord$3.showFull = !state.showFull;
          return newrecord$3;
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SettingFormWidth */0 :
          var newrecord$4 = Caml_obj.caml_obj_dup(state);
          newrecord$4.formHeight = action[1];
          newrecord$4.formWidth = action[0];
          return newrecord$4;
      case /* ActionPermissItems */1 :
          var newrecord$5 = Caml_obj.caml_obj_dup(state);
          newrecord$5.export = action[3];
          newrecord$5.delete = action[2];
          newrecord$5.update = action[1];
          newrecord$5.insert = action[0];
          return newrecord$5;
      case /* SettingFormPolls */2 :
          var newrecord$6 = Caml_obj.caml_obj_dup(state);
          newrecord$6.items = $$Array.append(state.items, action[1]);
          newrecord$6.itemCount = state.itemCount + action[0] | 0;
          return newrecord$6;
      case /* SettingFormItems */3 :
          var newrecord$7 = Caml_obj.caml_obj_dup(state);
          newrecord$7.items = action[1];
          newrecord$7.itemCount = action[0];
          return newrecord$7;
      case /* ClickItemTab */4 :
          var index = action[0];
          var newrecord$8 = Caml_obj.caml_obj_dup(state);
          newrecord$8.index = index;
          newrecord$8.tabitems = List.mapi((function (i, tabtitem) {
                  return {
                          tabShow: index === i,
                          tabImage: tabtitem.tabImage
                        };
                }), state.tabitems);
          return newrecord$8;
      case /* ShowAnimationFull */5 :
          var newrecord$9 = Caml_obj.caml_obj_dup(state);
          newrecord$9.formitems = action[7];
          newrecord$9.formScore = action[6];
          newrecord$9.formFinish = action[5];
          newrecord$9.formRestart = action[4];
          newrecord$9.formExam = action[3];
          newrecord$9.formDesc = action[2];
          newrecord$9.formTile = action[1];
          newrecord$9.formId = action[0];
          newrecord$9.showFull = !state.showFull;
          return newrecord$9;
      case /* SettingAnimationFull */6 :
          var newrecord$10 = Caml_obj.caml_obj_dup(state);
          newrecord$10.formitems = action[7];
          newrecord$10.formScore = action[6];
          newrecord$10.formFinish = action[5];
          newrecord$10.formRestart = action[4];
          newrecord$10.formExam = action[3];
          newrecord$10.formDesc = action[2];
          newrecord$10.formTile = action[1];
          newrecord$10.formId = action[0];
          return newrecord$10;
      case /* ShowDrop */7 :
          var index$1 = action[1];
          var showDrop = action[0];
          var newrecord$11 = Caml_obj.caml_obj_dup(state);
          newrecord$11.formitems = $$Array.mapi((function (i, formitem) {
                  if (index$1 === i) {
                    return {
                            iid: formitem.iid,
                            title: formitem.title,
                            showVeri: formitem.showVeri,
                            showDrop: showDrop,
                            showFile: formitem.showFile,
                            outValue: formitem.outValue,
                            value: formitem.value,
                            type_: formitem.type_,
                            operation: formitem.operation,
                            area: formitem.area,
                            eror: formitem.eror,
                            showCheck: formitem.showCheck,
                            answeritems: formitem.answeritems
                          };
                  } else {
                    return formitem;
                  }
                }), state.formitems);
          return newrecord$11;
      case /* ShowFile */8 :
          var index$2 = action[1];
          var value = action[0];
          var newrecord$12 = Caml_obj.caml_obj_dup(state);
          newrecord$12.formitems = $$Array.mapi((function (i, formitem) {
                  if (index$2 === i) {
                    return {
                            iid: formitem.iid,
                            title: formitem.title,
                            showVeri: formitem.showVeri,
                            showDrop: formitem.showDrop,
                            showFile: !formitem.showFile,
                            outValue: formitem.outValue,
                            value: value,
                            type_: formitem.type_,
                            operation: formitem.operation,
                            area: formitem.area,
                            eror: formitem.eror,
                            showCheck: formitem.showCheck,
                            answeritems: formitem.answeritems
                          };
                  } else {
                    return formitem;
                  }
                }), state.formitems);
          return newrecord$12;
      case /* ChangeValue */9 :
          var index$3 = action[1];
          var value$1 = action[0];
          var newrecord$13 = Caml_obj.caml_obj_dup(state);
          newrecord$13.formitems = $$Array.mapi((function (i, formitem) {
                  if (index$3 === i) {
                    return {
                            iid: formitem.iid,
                            title: formitem.title,
                            showVeri: formitem.showVeri,
                            showDrop: formitem.showDrop,
                            showFile: formitem.showFile,
                            outValue: formitem.outValue,
                            value: value$1,
                            type_: formitem.type_,
                            operation: formitem.operation,
                            area: formitem.area,
                            eror: formitem.eror,
                            showCheck: formitem.showCheck,
                            answeritems: formitem.answeritems
                          };
                  } else {
                    return formitem;
                  }
                }), state.formitems);
          return newrecord$13;
      case /* ClickCheckbox */10 :
          var index$4 = action[1];
          var aindex = action[0];
          var newrecord$14 = Caml_obj.caml_obj_dup(state);
          newrecord$14.formitems = $$Array.mapi((function (i, formitem) {
                  if (index$4 === i) {
                    return {
                            iid: formitem.iid,
                            title: formitem.title,
                            showVeri: formitem.showVeri,
                            showDrop: formitem.showDrop,
                            showFile: formitem.showFile,
                            outValue: formitem.outValue,
                            value: formitem.value,
                            type_: formitem.type_,
                            operation: formitem.operation,
                            area: formitem.area,
                            eror: formitem.eror,
                            showCheck: formitem.showCheck,
                            answeritems: $$Array.mapi((function (ai, answeritem) {
                                    if (aindex === ai) {
                                      return {
                                              id: answeritem.id,
                                              values: answeritem.values,
                                              showAnswer: !answeritem.showAnswer,
                                              showRight: answeritem.showRight
                                            };
                                    } else {
                                      return answeritem;
                                    }
                                  }), formitem.answeritems)
                          };
                  } else {
                    return formitem;
                  }
                }), state.formitems);
          return newrecord$14;
      case /* ClickRadio */11 :
          var index$5 = action[1];
          var aindex$1 = action[0];
          var newrecord$15 = Caml_obj.caml_obj_dup(state);
          newrecord$15.formitems = $$Array.mapi((function (i, formitem) {
                  if (index$5 === i) {
                    return {
                            iid: formitem.iid,
                            title: formitem.title,
                            showVeri: formitem.showVeri,
                            showDrop: formitem.showDrop,
                            showFile: formitem.showFile,
                            outValue: formitem.outValue,
                            value: formitem.value,
                            type_: formitem.type_,
                            operation: formitem.operation,
                            area: formitem.area,
                            eror: formitem.eror,
                            showCheck: formitem.showCheck,
                            answeritems: $$Array.mapi((function (ai, answeritem) {
                                    return {
                                            id: answeritem.id,
                                            values: answeritem.values,
                                            showAnswer: aindex$1 === ai ? !answeritem.showAnswer : false,
                                            showRight: answeritem.showRight
                                          };
                                  }), formitem.answeritems)
                          };
                  } else {
                    return formitem;
                  }
                }), state.formitems);
          return newrecord$15;
      case /* ActionSnackBar */12 :
          var newrecord$16 = Caml_obj.caml_obj_dup(state);
          newrecord$16.youtubeText = action[0];
          newrecord$16.showYoutube = action[1];
          return newrecord$16;
      
    }
  }
}

var initialState_items = [];

var initialState_tabitems = /* :: */[
  {
    tabShow: false,
    tabImage: Icons$BtsCore.storeBlack
  },
  /* :: */[
    {
      tabShow: false,
      tabImage: Icons$BtsCore.menuBookBlack
    },
    /* [] */0
  ]
];

var initialState_formitems = [];

var initialState = {
  formLoad: false,
  formWidth: 0,
  formHeight: 0,
  showProgress: true,
  error: false,
  insert: false,
  update: false,
  delete: false,
  export: false,
  itemCount: 0,
  items: initialState_items,
  showFull: false,
  formId: "",
  formTile: "",
  formDesc: "",
  tabitems: initialState_tabitems,
  index: 0,
  formExam: false,
  formRestart: false,
  formFinish: false,
  formScore: "0",
  formitems: initialState_formitems,
  showYoutube: false,
  youtubeText: ""
};

function answerIcon(outValue, showAnswer) {
  if (outValue === "checkbox") {
    if (showAnswer) {
      return Icons$BtsCore.checkBoxBlack;
    } else {
      return Icons$BtsCore.checkBoxOutlineBlankBlack;
    }
  } else if (showAnswer) {
    return Icons$BtsCore.radioButtonCheckedBlack;
  } else {
    return Icons$BtsCore.radioButtonUncheckedBlack;
  }
}

function Home(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var fileRef = React.useRef(null);
  var barShowRestoreAction = function (youtubeText) {
    Curry._1(dispatch, /* ActionSnackBar */Block.__(12, [
            youtubeText,
            true
          ]));
    setTimeout((function (param) {
            return Curry._1(dispatch, /* ActionSnackBar */Block.__(12, [
                          "",
                          false
                        ]));
          }), 5000);
    
  };
  var pollingFunc = function (length,count){ if (!state.showFull) { pollingAJax(length + count); } };
  var pollingEror = function (length){ if (!state.showFull) { setTimeout(() => pollingAJax(length), 15000); } };
  var pollingAJax = function (length) {
    Axiosapi$BtsCore.Default.polling(Data$BtsCore.otherData(localStorage.getItem("newid"), length)).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* SettingFormPolls */Block.__(2, [
                                  response.data.items.length,
                                  response.data.items
                                ])), pollingFunc(length, response.data.items.length)));
            })).catch((function (param) {
            return Promise.resolve(pollingEror(length));
          }));
    
  };
  var searchAJax = function (param) {
    Axiosapi$BtsCore.Default.search(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* SettingFormItems */Block.__(3, [
                        response.data.itemCount,
                        response.data.items
                      ]));
                Curry._1(dispatch, /* ActionShowProgress */2);
                tmp = pollingAJax(response.data.itemCount);
              } else {
                Curry._1(dispatch, /* SettingError */0);
                barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */2);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var permissAJax = function (param) {
    Axiosapi$BtsCore.Form.permiss(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* ActionPermissItems */Block.__(1, [
                                  response.data.insert,
                                  response.data.update,
                                  response.data.delete,
                                  response.data.export
                                ])), searchAJax(undefined)));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          var match = state.formLoad;
          if (match) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */1);
          Curry._1(dispatch, /* SettingFormWidth */Block.__(0, [
                  window.innerWidth,
                  window.innerHeight
                ]));
          var timeId = permissAJax(undefined);
          return (function (param) {
                    return timeId;
                  });
        }));
  var handleResize = function ($$event) {
    return Curry._1(dispatch, /* SettingFormWidth */Block.__(0, [
                  $$event.currentTarget.innerWidth,
                  $$event.currentTarget.innerHeight
                ]));
  };
  React.useEffect((function () {
          window.addEventListener("resize", handleResize, true);
          return (function (param) {
                    
                  });
        }), ([]));
  var clickFormBoard = React.useCallback((function (id) {
          Curry._1(dispatch, /* ActionShowProgress */2);
          Axiosapi$BtsCore.Default.sItem(Data$BtsCore.dFormData(id, localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      Curry._1(dispatch, /* ShowAnimationFull */Block.__(5, [
                              response.data.formId,
                              response.data.tile,
                              response.data.desc,
                              response.data.exam,
                              response.data.restart,
                              response.data.finish,
                              response.data.score,
                              response.data.items
                            ]));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var clickItemTab = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ClickItemTab */Block.__(4, [i]));
        }));
  var dragOver = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowDrop */Block.__(7, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeave = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowDrop */Block.__(7, [
                            false,
                            i
                          ]));
            });
        }));
  var dropFile = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */2);
              return Curry._1(dispatch, /* ShowDrop */Block.__(7, [
                            false,
                            i
                          ]));
            });
        }));
  var uploadFile = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ActionShowProgress */2);
            });
        }));
  var chooseFile = React.useCallback((function (param) {
          var el = fileRef.current;
          if (!(el == null)) {
            el.click();
            return ;
          }
          
        }));
  var changeValue = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeValue */Block.__(9, [
                            value,
                            i
                          ]));
            });
        }));
  var clickElement = React.useCallback((function (value) {
          return (function (ai, i) {
              if (value === "checkbox") {
                return Curry._1(dispatch, /* ClickCheckbox */Block.__(10, [
                              ai,
                              i
                            ]));
              } else {
                return Curry._1(dispatch, /* ClickRadio */Block.__(11, [
                              ai,
                              i
                            ]));
              }
            });
        }));
  var restartForm = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */2);
          Axiosapi$BtsCore.Default.restart(Data$BtsCore.dFormData(state.formId, localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      Curry._1(dispatch, /* SettingAnimationFull */Block.__(6, [
                              response.data.formId,
                              response.data.tile,
                              response.data.desc,
                              response.data.exam,
                              response.data.restart,
                              response.data.finish,
                              response.data.score,
                              response.data.items
                            ]));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var insertForm = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */2);
          Axiosapi$BtsCore.Default.insert(Data$BtsCore.iFormData(state.formId, state.formitems, localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      Curry._1(dispatch, /* SettingAnimationFull */Block.__(6, [
                              response.data.formId,
                              response.data.tile,
                              response.data.desc,
                              response.data.exam,
                              response.data.restart,
                              response.data.finish,
                              response.data.score,
                              response.data.items
                            ]));
                      barShowRestoreAction(Status$BtsCore.statusModule("saveSuccess"));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */2);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var closeAnimationFull = React.useCallback((function (param) {
          return Curry._1(dispatch, /* CloseAnimationFull */3);
        }));
  var match$1 = state.formFinish;
  var match$2 = state.formRestart;
  var tmp;
  var exit = 0;
  if (match$1 && match$2) {
    tmp = React.createElement(GridItem$BtsCore.make, {
          top: "0",
          right: "0",
          bottom: "0",
          left: "0",
          xs: "no",
          children: React.createElement(Button$BtsCore.make, {
                onClick: restartForm,
                children: null
              }, React.createElement(IconAction$BtsCore.make, {
                    animation: "leftRight",
                    src: Icons$BtsCore.refreshWhite
                  }), React.createElement(ReactIntl.FormattedMessage, {
                    id: "Formor.restart",
                    defaultMessage: "Restart"
                  }))
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = React.createElement(GridItem$BtsCore.make, {
          top: "0",
          right: "0",
          bottom: "0",
          left: "0",
          xs: "no",
          children: React.createElement(Button$BtsCore.make, {
                onClick: insertForm,
                children: null
              }, React.createElement(IconAction$BtsCore.make, {
                    animation: "leftRight",
                    src: Icons$BtsCore.saveWhite
                  }), React.createElement(ReactIntl.FormattedMessage, {
                    id: "save",
                    defaultMessage: "Save"
                  }))
        });
  }
  var match$3 = state.index;
  var tmp$1;
  if (match$3 !== 0) {
    var match$4 = state.formFinish;
    var match$5 = state.formExam;
    var tmp$2;
    var exit$1 = 0;
    if (match$4 && match$5) {
      tmp$2 = React.createElement(Typography$BtsCore.make, {
            variant: "h1",
            color: "rgba(255,0,0,0.8)",
            fontWeight: "bolder",
            children: state.formScore
          });
    } else {
      exit$1 = 1;
    }
    if (exit$1 === 1) {
      tmp$2 = match$5 ? React.createElement(Typography$BtsCore.make, {
              variant: "tile",
              color: "rgba(255,0,0,0.8)",
              fontSize: "x-large",
              fontWeight: "bolder",
              children: "THIS FORM UNEXAM"
            }) : React.createElement(Typography$BtsCore.make, {
              variant: "tile",
              color: "rgba(255,0,0,0.8)",
              fontSize: "x-large",
              fontWeight: "bolder",
              children: "THIS FORM IS NOT EXAM"
            });
    }
    tmp$1 = React.createElement("div", {
          style: OutSide$BtsCore.errorForm
        }, tmp$2);
  } else {
    tmp$1 = $$Array.mapi((function (i, formitem) {
            var match = formitem.outValue;
            var tmp;
            switch (match) {
              case "image" :
                  tmp = React.createElement(ImageUpload$BtsCore.make, {
                        webLoad: state.showProgress,
                        showDrop: formitem.showDrop,
                        showFile: formitem.showFile,
                        src: formitem.value,
                        fileRef: fileRef,
                        onDragOver: (function ($$event) {
                            return Curry._2(dragOver, $$event, i);
                          }),
                        onDragLeave: (function ($$event) {
                            return Curry._2(dragLeave, $$event, i);
                          }),
                        onDrop: (function ($$event) {
                            return Curry._3(dropFile, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                          }),
                        disabled: state.showProgress,
                        onClick: chooseFile,
                        onChange: (function ($$event) {
                            return Curry._2(uploadFile, Caml_array.caml_array_get($$event.target.files, 0), i);
                          })
                      });
                  break;
              case "label" :
                  tmp = React.createElement(Typography$BtsCore.make, {
                        variant: "subtitle2",
                        style: {
                          paddingRight: "6px",
                          paddingLeft: "6px"
                        },
                        noWrap: true,
                        children: null
                      });
                  break;
              case "text" :
                  tmp = React.createElement(TextFieldOutline$BtsCore.make, {
                        width: "50",
                        top: "0",
                        left: "0",
                        borderTop: "10",
                        borderBottom: "10",
                        enterBorderColor: "rgba(255,0,0,0.8)",
                        downBorderColor: "rgba(255,0,0,0.6)",
                        borderColor: "rgba(0,0,0,0.2)",
                        value: formitem.value,
                        disabled: state.showProgress,
                        onChange: (function ($$event) {
                            return Curry._2(changeValue, $$event.target.value, i);
                          }),
                        children: null
                      });
                  break;
              case "textarea" :
                  tmp = React.createElement(TextFieldOutline$BtsCore.make, {
                        top: "0",
                        left: "0",
                        borderTop: "10",
                        borderBottom: "10",
                        enterBorderColor: "rgba(255,0,0,0.8)",
                        downBorderColor: "rgba(255,0,0,0.6)",
                        borderColor: "rgba(0,0,0,0.2)",
                        value: formitem.value,
                        disabled: state.showProgress,
                        onChange: (function ($$event) {
                            return Curry._2(changeValue, $$event.target.value, i);
                          }),
                        children: null
                      });
                  break;
              default:
                tmp = React.createElement(GridContainer$BtsCore.make, {
                      direction: "column",
                      justify: "center",
                      alignItem: "stretch",
                      children: $$Array.mapi((function (ai, answeritem) {
                              var match = state.formFinish;
                              var match$1 = state.formExam;
                              return React.createElement(GridItem$BtsCore.make, {
                                          top: "0",
                                          right: "0",
                                          bottom: "6",
                                          left: "0",
                                          xs: "auto",
                                          children: React.createElement(GridContainer$BtsCore.make, {
                                                direction: "row",
                                                justify: "start",
                                                alignItem: "center",
                                                children: null
                                              }, React.createElement(GridItem$BtsCore.make, {
                                                    top: "0",
                                                    right: "0",
                                                    bottom: "0",
                                                    left: "0",
                                                    xs: "no",
                                                    children: React.createElement(IconButton$BtsCore.make, {
                                                          padding: "4",
                                                          disabled: state.showProgress,
                                                          onClick: (function (param) {
                                                              return Curry._3(clickElement, formitem.outValue, ai, i);
                                                            }),
                                                          children: React.createElement(IconAction$BtsCore.make, {
                                                                animation: "leftRight",
                                                                src: answerIcon(formitem.outValue, answeritem.showAnswer)
                                                              })
                                                        })
                                                  }), React.createElement(GridItem$BtsCore.make, {
                                                    top: "0",
                                                    right: "6",
                                                    bottom: "0",
                                                    left: "0",
                                                    xs: "auto",
                                                    children: React.createElement(Typography$BtsCore.make, {
                                                          variant: "subtitle1",
                                                          children: answeritem.values
                                                        })
                                                  }), match && match$1 ? React.createElement(GridItem$BtsCore.make, {
                                                      top: "0",
                                                      right: "0",
                                                      bottom: "0",
                                                      left: "0",
                                                      xs: "no",
                                                      children: React.createElement(IconAction$BtsCore.make, {
                                                            animation: "leftRight",
                                                            src: answeritem.showRight ? Icons$BtsCore.doneSuccessful : Icons$BtsCore.errorWarn
                                                          })
                                                    }) : null)
                                        });
                            }), formitem.answeritems)
                    });
            }
            return React.createElement(GridItem$BtsCore.make, {
                        top: "0",
                        right: "24",
                        left: "24",
                        xs: "auto",
                        children: React.createElement(CardOrPaperBoard$BtsCore.make, {
                              showLine: true,
                              children: React.createElement(GridContainer$BtsCore.make, {
                                    direction: "column",
                                    justify: "start",
                                    alignItem: "stretch",
                                    children: null
                                  }, React.createElement(GridItem$BtsCore.make, {
                                        right: "20",
                                        left: "20",
                                        xs: "auto",
                                        children: React.createElement(Typography$BtsCore.make, {
                                              variant: "subheading",
                                              fontSize: "1.2rem",
                                              fontWeight: "bolder",
                                              children: formitem.title
                                            })
                                      }), React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        bottom: "0",
                                        xs: "auto",
                                        children: tmp
                                      }))
                            })
                      });
          }), state.formitems);
  }
  return React.createElement(React.Fragment, undefined, React.createElement(NewFacetube$BtsCore.make, {
                  showProgress: state.showProgress,
                  error: state.error,
                  children: React.createElement(GridItem$BtsCore.make, {
                        style: Together$BtsCore.marginAuto,
                        top: "0",
                        right: "32",
                        bottom: "0",
                        left: "32",
                        xs: "12",
                        maxWidth: "770px",
                        children: React.createElement(GridContainer$BtsCore.make, {
                              direction: "column",
                              justify: "center",
                              alignItem: "stretch",
                              children: React.createElement(GridItem$BtsCore.make, {
                                    right: "24",
                                    bottom: "0",
                                    left: "24",
                                    xs: "auto",
                                    children: React.createElement(GridContainer$BtsCore.make, {
                                          direction: "row",
                                          justify: "start",
                                          alignItem: "center",
                                          children: $$Array.map((function (item) {
                                                  return React.createElement("div", {
                                                              onClick: (function (param) {
                                                                  return Curry._1(clickFormBoard, item.id);
                                                                })
                                                            }, React.createElement(GridItem$BtsCore.make, {
                                                                  style: {
                                                                    height: "246px",
                                                                    marginRight: "12px"
                                                                  },
                                                                  top: "0",
                                                                  right: "0",
                                                                  bottom: "0",
                                                                  left: "0",
                                                                  width: "210px",
                                                                  cursor: "pointer",
                                                                  enterBorderWidth: "2",
                                                                  borderWidth: "2",
                                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                                  borderRadius: "1",
                                                                  xs: "no",
                                                                  children: React.createElement(Card$BtsCore.make, {
                                                                        children: React.createElement(GridContainer$BtsCore.make, {
                                                                              direction: "column",
                                                                              justify: "center",
                                                                              alignItem: "stretch",
                                                                              children: null
                                                                            }, React.createElement(GridItem$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "0",
                                                                                  bottom: "0",
                                                                                  left: "0",
                                                                                  xs: "auto",
                                                                                  children: React.createElement("div", {
                                                                                        style: {
                                                                                          height: "175px"
                                                                                        }
                                                                                      })
                                                                                }), React.createElement(GridItem$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "12",
                                                                                  bottom: "0",
                                                                                  left: "16",
                                                                                  xs: "no",
                                                                                  children: React.createElement(Typography$BtsCore.make, {
                                                                                        variant: "subtitle1",
                                                                                        children: item.tile
                                                                                      })
                                                                                }), React.createElement(GridItem$BtsCore.make, {
                                                                                  top: "0",
                                                                                  right: "12",
                                                                                  bottom: "0",
                                                                                  left: "16",
                                                                                  xs: "no",
                                                                                  children: React.createElement(GridContainer$BtsCore.make, {
                                                                                        direction: "row",
                                                                                        justify: "center",
                                                                                        alignItem: "center",
                                                                                        children: null
                                                                                      }, React.createElement(GridItem$BtsCore.make, {
                                                                                            top: "0",
                                                                                            right: "8",
                                                                                            bottom: "0",
                                                                                            left: "0",
                                                                                            xs: "no",
                                                                                            children: React.createElement(IconAction$BtsCore.make, {
                                                                                                  animation: "leftRight",
                                                                                                  src: Icons$BtsCore.dateRangeBlack
                                                                                                })
                                                                                          }), React.createElement(GridItem$BtsCore.make, {
                                                                                            top: "0",
                                                                                            right: "0",
                                                                                            bottom: "0",
                                                                                            left: "0",
                                                                                            xs: "auto",
                                                                                            children: React.createElement(Typography$BtsCore.make, {
                                                                                                  variant: "subtitle2",
                                                                                                  children: item.datetime
                                                                                                })
                                                                                          }), React.createElement(GridItem$BtsCore.make, {
                                                                                            top: "0",
                                                                                            right: "0",
                                                                                            bottom: "0",
                                                                                            left: "0",
                                                                                            xs: "no",
                                                                                            children: React.createElement(IconButton$BtsCore.make, {
                                                                                                  padding: "3",
                                                                                                  disabled: state.showProgress,
                                                                                                  children: null
                                                                                                }, React.createElement(Tooltip$BtsCore.make, {
                                                                                                      location: "top",
                                                                                                      backgroundColor: "rgba(255,0,0,0.8)",
                                                                                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                                            id: "more",
                                                                                                            defaultMessage: "More"
                                                                                                          })
                                                                                                    }), React.createElement(IconAction$BtsCore.make, {
                                                                                                      animation: "leftRight",
                                                                                                      src: Icons$BtsCore.moreVertBlack
                                                                                                    }))
                                                                                          }))
                                                                                }))
                                                                      })
                                                                }));
                                                }), state.items)
                                        })
                                  })
                            })
                      })
                }), React.createElement(DialogFull$BtsCore.make, {
                  showAnimation: state.showFull,
                  children: null
                }, React.createElement(DialogTitle$BtsCore.make, {
                      top: "20",
                      left: "64",
                      children: React.createElement(Typography$BtsCore.make, {
                            variant: "tile",
                            children: state.formTile
                          })
                    }), React.createElement(DialogContent$BtsCore.make, {
                      children: React.createElement(DialogContentText$BtsCore.make, {
                            children: React.createElement(GridItem$BtsCore.make, {
                                  style: Together$BtsCore.marginAuto,
                                  top: "0",
                                  right: "0",
                                  bottom: "0",
                                  left: "54",
                                  xs: "12",
                                  maxWidth: "770px",
                                  children: React.createElement(GridContainer$BtsCore.make, {
                                        direction: "column",
                                        justify: "center",
                                        alignItem: "stretch",
                                        children: null
                                      }, React.createElement(GridItem$BtsCore.make, {
                                            style: {
                                              position: "sticky",
                                              top: "0px",
                                              zIndex: "1000"
                                            },
                                            top: "0",
                                            right: "24",
                                            left: "24",
                                            xs: "auto",
                                            children: React.createElement(GridContainer$BtsCore.make, {
                                                  direction: "row",
                                                  justify: "around",
                                                  alignItem: "center",
                                                  children: null
                                                }, React.createElement(GridItem$BtsCore.make, {
                                                      top: "0",
                                                      right: "0",
                                                      bottom: "0",
                                                      left: "0",
                                                      xs: "auto",
                                                      children: React.createElement(Tabs$BtsCore.make, {
                                                            id: "report-",
                                                            index: state.index,
                                                            height: "3",
                                                            children: $$Array.of_list(List.mapi((function (i, tabitem) {
                                                                        return React.createElement(Tab$BtsCore.make, {
                                                                                    tabShow: tabitem.tabShow,
                                                                                    maxWidth: "111.6",
                                                                                    borderRadius: "15",
                                                                                    id: "report-" + String(i),
                                                                                    animationName: "none",
                                                                                    onClick: (function (param) {
                                                                                        return Curry._1(clickItemTab, i);
                                                                                      }),
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          width: "28",
                                                                                          height: "28",
                                                                                          animation: "leftRight",
                                                                                          src: tabitem.tabImage
                                                                                        })
                                                                                  });
                                                                      }), state.tabitems))
                                                          })
                                                    }), tmp)
                                          }), tmp$1)
                                })
                          })
                    }), React.createElement(DialogActions$BtsCore.make, {
                      children: React.createElement("div", {
                            style: {
                              left: "10px",
                              position: "fixed",
                              top: "10px"
                            }
                          }, React.createElement(IconButton$BtsCore.make, {
                                padding: "12",
                                disabled: state.showProgress,
                                onClick: closeAnimationFull,
                                children: null
                              }, React.createElement(Tooltip$BtsCore.make, {
                                    location: "bottom",
                                    backgroundColor: "rgba(255,0,0,0.8)",
                                    children: React.createElement(ReactIntl.FormattedMessage, {
                                          id: "closed",
                                          defaultMessage: "Closed"
                                        })
                                  }), React.createElement(IconAction$BtsCore.make, {
                                    animation: "circle",
                                    src: Icons$BtsCore.clearBlack
                                  })))
                    })), React.createElement(SnackbarYoutube$BtsCore.make, {
                  showYoutube: state.showYoutube,
                  position: "bottomLeft",
                  children: /* tuple */[
                    React.createElement("span", undefined, state.youtubeText),
                    null
                  ]
                }));
}

var make = Home;

export {
  reducer ,
  initialState ,
  answerIcon ,
  make ,
  
}
/*  Not a pure module */
