// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Chip/chipButton.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function components(variant) {
  switch (variant) {
    case "Link" :
    case "a" :
        return "a";
    default:
      return "div";
  }
}

function disabledBackgroundColors(disabledBackgroundColor) {
  if (disabledBackgroundColor !== undefined) {
    return disabledBackgroundColor;
  } else {
    return "rgba(102,102,102,0.8)";
  }
}

function otherBackgroundColors(otherBackgroundColor) {
  if (otherBackgroundColor !== undefined) {
    return otherBackgroundColor;
  } else {
    return "rgba(0,0,0,0.4)";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "transparent";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(0,0,0,0.26)";
  }
}

function ChipButton(Props) {
  var variant = Props.variant;
  var href = Props.href;
  var style = Props.style;
  var disabledBackgroundColor = Props.disabledBackgroundColor;
  var enterBackgroundColor = Props.enterBackgroundColor;
  var downBackgroundColor = Props.downBackgroundColor;
  var backgroundColor = Props.backgroundColor;
  var color = Props.color;
  var disabled = Props.disabled;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = Setting$BtsCore.disabledObjects(disabled);
  var match$2 = state.enter;
  var match$3 = state.down;
  return React.createElement(components(Setting$BtsCore.stringObjects(variant)), {
              className: "j8nrp8lcp juyseni j189749r",
              role: "button",
              href: Setting$BtsCore.stringObjects(href),
              onMouseEnter: (function (param) {
                  return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
                }),
              onMouseLeave: (function (param) {
                  return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
                })
            }, children[0], React.createElement("span", {
                  className: "j2dfb39 j2dfspan",
                  style: Object.assign(({}), {
                        backgroundColor: match$1 ? (
                            disabledBackgroundColor !== undefined ? disabledBackgroundColor : "rgba(102,102,102,0.8)"
                          ) : (
                            match$2 ? (
                                match$3 ? (
                                    downBackgroundColor !== undefined ? downBackgroundColor : "rgba(0,0,0,0.4)"
                                  ) : (
                                    enterBackgroundColor !== undefined ? enterBackgroundColor : "rgba(0,0,0,0.4)"
                                  )
                              ) : (
                                backgroundColor !== undefined ? backgroundColor : "transparent"
                              )
                          ),
                        color: color !== undefined ? color : "rgba(0,0,0,0.26)"
                      }, Setting$BtsCore.styleObjects(style)),
                  disabled: Setting$BtsCore.disabledObjects(disabled),
                  onMouseDown: (function (param) {
                      return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
                    }),
                  onMouseEnter: (function (param) {
                      return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
                    }),
                  onMouseLeave: (function (param) {
                      return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
                    }),
                  onMouseUp: (function (param) {
                      return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
                    })
                }, children[1]));
}

var make = ChipButton;

export {
  reducer ,
  initialState ,
  components ,
  disabledBackgroundColors ,
  otherBackgroundColors ,
  backgroundColors ,
  colors ,
  make ,
  
}
/*  Not a pure module */
