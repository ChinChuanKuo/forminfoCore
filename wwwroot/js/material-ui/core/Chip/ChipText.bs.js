// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Chip/chipText.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function otherBackgroundColors(otherBackgroundColor) {
  if (otherBackgroundColor !== undefined) {
    return otherBackgroundColor;
  } else {
    return "rgba(0,0,0,0.08)";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "transparent";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(0,0,0,0.87)";
  }
}

function ChipText(Props) {
  var enterBackgroundColor = Props.enterBackgroundColor;
  var downBackgroundColor = Props.downBackgroundColor;
  var backgroundColor = Props.backgroundColor;
  var style = Props.style;
  var color = Props.color;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.enter;
  var match$2 = state.down;
  return React.createElement("div", {
              className: "j8nrp8lcts j1s4s3te juysenit",
              style: {
                backgroundColor: match$1 ? (
                    match$2 ? (
                        downBackgroundColor !== undefined ? downBackgroundColor : "rgba(0,0,0,0.08)"
                      ) : (
                        enterBackgroundColor !== undefined ? enterBackgroundColor : "rgba(0,0,0,0.08)"
                      )
                  ) : (
                    backgroundColor !== undefined ? backgroundColor : "transparent"
                  )
              },
              onMouseDown: (function (param) {
                  return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
                }),
              onMouseEnter: (function (param) {
                  return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
                }),
              onMouseLeave: (function (param) {
                  return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
                }),
              onMouseUp: (function (param) {
                  return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
                })
            }, React.createElement("div", {
                  className: "j4f2n9ip ja16k5a j8idkay"
                }, children[0]), React.createElement("span", {
                  className: "j1ffzryl",
                  style: Object.assign(({}), {
                        color: color !== undefined ? color : "rgba(0,0,0,0.87)"
                      }, Setting$BtsCore.styleObjects(style))
                }, children[1]));
}

var make = ChipText;

export {
  reducer ,
  initialState ,
  otherBackgroundColors ,
  backgroundColors ,
  colors ,
  make ,
  
}
/*  Not a pure module */
